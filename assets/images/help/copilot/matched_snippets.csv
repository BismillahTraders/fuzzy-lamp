;example_id;matching_part_of_suggestion;number_of_tokens_in_matching_part_of_suggestion;number_of_matches;link_to_example_match;number_of_lines_of_context
1;efa667297f49ca5065e12e0a9743445e00ebd1c2;"x, y, u, v = 0, 1, 1, 0
    while a != 0:
        q, r = b // a, b % a
        m, n = x - u * q, y - v * q
        b, a, x, y, u, v = a, r, u, v, m, n";71;2;https://github.com/remifuhriman/numerical_computing/blob/master/Labs/RSA/solutions.py;2
2;c101dc6dd83eca9260fbfc0369979a7965240df4;\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\;97;1;https://github.com/lucamassarelli/AMFC-BRCT/blob/master/core/MetricsCollector.py;>7
3;c101dc6dd83eca9260fbfc0369979a7965240df4;\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+;99;1;https://github.com/lucamassarelli/AMFC-BRCT/blob/master/core/MetricsCollector.py;>7
4;c101dc6dd83eca9260fbfc0369979a7965240df4;\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\;100;1;https://github.com/lucamassarelli/AMFC-BRCT/blob/master/core/MetricsCollector.py;>7
5;7f55777d22c616ae337c2f440e38ddb311907824;\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)',;98;1;https://github.com/dvdylus/treeCl/blob/master/bin/fast_run_raxml.py;>7
6;5d7d7b9e5d18d271ba8065b57b63c11aa62650e4;")       
    def forward(self, x):       
        x = self.pool(F.relu(self.conv1(x)))       
        x = self.pool(F.relu(self.conv2(x)))       
        x = x.view(-1, 16 * 5 * 5)       
        x = F.relu(self.fc1(x))       
        x =";75;6;https://github.com/strongio/cerbero/blob/master/examples/cifar10_example/cifar10_multitask.py;4
7;5d7d7b9e5d18d271ba8065b57b63c11aa62650e4;")       
    def forward(self, x):       
        x = self.pool(F.relu(self.conv1(x)))       
        x = self.pool(F.relu(self.conv2(x)))       
        x = x.view(-1, 16 * 5 * 5)       
        x = F.relu(self.fc1(x))       
        x =";75;6;https://github.com/strongio/cerbero/blob/master/examples/cifar10_example/cifar10_multitask.py;4
8;8fe8dc24f5255aaa660568e64cf3489b795ed621;")
    stock_data = []
    split_source = source_code.split('\n')
    for line in split_source:
        split_line = line.split(',')
        if len(split_line) == 6:
            if 'values' not in line and 'labels' not in line:
                stock_data.append(line)";61;2;https://github.com/DIS17JTH/displayPiProject/blob/master/data_from_internet.py;>7
9;f72768d35a1bfee78c27a8c920ca4a80b27f719b;of the following questions (which you may assume is evaluated independently of the previous questions, so that testList has the value indicated above), provide an expression using applyToEach, so that after evaluation testList has the indicated value. You may need to write a simple procedure in each question to help with this process.;60;1;https://github.com/kd-nguyen/guttag/blob/master/6.00.1x/w5-apply_to_each.py;1
10;13af40cbffd29607178688e4f935be6af655d203;B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/0/1/2/3/4/5/6/7/8/9/;70;2;https://github.com/IronLanguages/ironpython3/blob/master/Tests/test_stdmodules.py;1
11;9ceada1552a2619b2ecd33e07321e0e5e45663b8;", cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (21, 21), 0)

    # if the first frame is None, initialize it
    if firstFrame is None:
        firstFrame = gray
        continue

    # compute the absolute difference between the current frame and
    # first frame
    frameDelta = cv2.absdiff(firstFrame, gray)
    thresh = cv2.threshold(frameDelta, 25, 255, cv2.THRESH_BINARY)[1]

    # dilate the thresholded image to fill in holes, then find contours
    # on thresholded image
    thresh = cv2.dilate(thresh, None, iterations=2)
    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
                            cv2.CHAIN_APPROX_SIMPLE)
    cnts = cnts[0] if imutils.is_cv2() else cnts[1]

    # loop over the contours
    for c in cnts:
        # if the contour is too small, ignore it
        if cv2.contourArea(c) < args[""min_area""]:
            continue

        # compute the bounding box for the contour, draw it on the frame,
        # and update the text
        (x, y, w, h) = cv2.boundingRect(c)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        text = """;257;16;https://github.com/nishantpoorswani/motion_detection/blob/master/motion_detector.py;1
12;10035a5ef46e05f698fced88ff6a520b1fda6943;"k, a, b, a1, b1 = 2, 4, 1, 12, 4
    while True:
        p, q, k = k*k, 2*k+1, k+1
        a, b, a1, b1 = a1, b1, p*a+q*a1, p*b+q*b1
        d, d1 = a/";74;3;https://github.com/fmasanori/PPZ/blob/master/pi generator.py;>7
13;10035a5ef46e05f698fced88ff6a520b1fda6943;"k, a, b, a1, b1 = 2, 4, 1, 12, 4
    while True:
        p, q, k = k*k, 2*k+1, k+1
        a, b, a1, b1 = a1, b1, p*a+q*a1, p*b+q*b1
        d, d1 = a/";74;3;https://github.com/fmasanori/PPZ/blob/master/pi generator.py;>7
14;10035a5ef46e05f698fced88ff6a520b1fda6943;"k, a, b, a1, b1 = 2, 4, 1, 12, 4
    while True:
        p, q, k = k*k, 2*k+1, k+1
        a, b, a1, b1 = a1, b1, p*a+q*a1, p*b+q*b1
        d, d1 = a/";74;3;https://github.com/fmasanori/PPZ/blob/master/pi generator.py;>7
15;87d22e982aec01dbba1e64a84b0937cad199bda8;q, r, t, k, m, x = 10*q, 10*(r-m*t), t, k, (10*(3*q+r))//t - 10*m, x;50;1;https://github.com/steven-cutting/maths/blob/master/maths/otherpie.py;>7
16;87d22e982aec01dbba1e64a84b0937cad199bda8;q, r, t, k, m, x = q*k, (2*q+r)*x, t*x, k+1, (q*(7*k+2)+r*x)//(t*x), x+2;60;1;https://github.com/steven-cutting/maths/blob/master/maths/otherpie.py;>7
17;a4c3d2c979c489e47c250f5fd3402328044f19fa;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    km = 6367 * c
    return km";113;5;https://github.com/NervosaX/reparser/blob/master/modules/gmaps.py;6
18;2c50c483254cf60b00a276cd01eb5a5f4ae91bdc;"dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2) * sin(dlat / 2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) * sin(dlon / 2)
    c = 2 * atan2(sqrt(a), sqrt(1 - a))";79;3;https://github.com/kyb3r/majorproject/blob/master/server/core/route_generation.py;6
19;8c76f07cfbfa90928d72dcf76029b44d8e9eb21c;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    r = 6371 # Radius of earth in kilometers. Use 3956 for miles
    return c * r";124;6;https://github.com/sarbjot-14/SFU/blob/master/cmpt353/e3/GPS_Tracks/calc_distance.py;6
20;a4c3d2c979c489e47c250f5fd3402328044f19fa;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    km = 6367 * c
    return km";113;5;https://github.com/NervosaX/reparser/blob/master/modules/gmaps.py;6
21;8c76f07cfbfa90928d72dcf76029b44d8e9eb21c;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    r = 6371  # Radius of earth in kilometers. Use 3956 for miles
    return c * r";124;6;https://github.com/sarbjot-14/SFU/blob/master/cmpt353/e3/GPS_Tracks/calc_distance.py;6
22;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
23;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
24;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
25;023ba10b2acf76024e495c08ef92741a5c95480b;"print(16)
    print(17)
    print(18)
    print(19)
    print(20)
    print(21)
    print(22)
    print(23)
    print(24)
    print(25)
    print(26)
    print(27)
    print(28)
    print(29)
    print(30)";60;1;https://github.com/raoniteixeira/algoritmos_te/blob/master/unidade_4/2.py;>7
26;16be96e3c6cc6ac83349eee9632bb7f9765e99e8;"a = 1
    b = 2
    c = 3
    d = 4
    e = 5
    f = 6
    g = 7
    h = 8
    i = 9
    j = 10
    k = 11
    l = 12
    m = 13
    n = 14
    o = 15
    p = 16
    q = 17
    r = 18
    s = 19
    t = 20
    u = 21
    v = 22
    w = 23
    x = 24
    y = 25
    z = 26";78;2;https://github.com/Wisetorsk/INF-200-Notes/blob/master/Python/ENIGMA_ord.py;>7
27;16be96e3c6cc6ac83349eee9632bb7f9765e99e8;"a = 1
    b = 2
    c = 3
    d = 4
    e = 5
    f = 6
    g = 7
    h = 8
    i = 9
    j = 10
    k = 11
    l = 12
    m = 13
    n = 14
    o = 15
    p = 16
    q = 17
    r = 18
    s = 19
    t = 20
    u = 21
    v = 22
    w = 23
    x = 24
    y = 25
    z = 26";78;2;https://github.com/Wisetorsk/INF-200-Notes/blob/master/Python/ENIGMA_ord.py;>7
28;8ea4e63c0d203860c4f59de75d87344671a383ec;/query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22nome%2C%20ak%22)&format=json&env=store%3A%;72;2;https://github.com/sirinenisaikiran/Python/blob/master/Traning/PyQs-master/PyQs-master/python-initial-reference/ToBeShared/reference/Code/web/flask/weather.py;>7
29;6b5df31137bd436722936c6357a8dfe955215a86;"Return a list of all items in this linked list.
        Best and worst case running time: Theta(n) for n items in the list
        because we always need to loop through all n nodes.""""""
        # Create an empty list of results
        result = []  # Constant time to create a new list
        # Start at the head node
        node = self.head  # Constant time";75;2;https://github.com/asha952/cs-1.3_algorithms/blob/master/linked_list.py;2
30;6b5df31137bd436722936c6357a8dfe955215a86;"Return a list of all items in this linked list.
        Best and worst case running time: Theta(n) for n items in the list
        because we always need to loop through all n nodes.""""""
        # Create an empty list of results
        result = []  # Constant time to create a new list
        # Start at the head node
        node = self.head";72;2;https://github.com/asha952/cs-1.3_algorithms/blob/master/linked_list.py;4
31;5d1cabb5ea56ef3ac8607c9ea420c56678ae6e7b;,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,;81;2;https://github.com/JulienAndres/p_androidKilobot/blob/master/mEDEA/stats_robot/test.py;>7
32;aa914b233c39f2bba9f9ca3425eb0adb631a43fc;")
    response.raise_for_status()

    analysis = response.json()

    # Extract the word bounding boxes and text.
    line_infos = [region[""lines""] for region in analysis[""regions""]]
    word_infos = []
    for line in line_infos:
        for word_metadata in line:
            for word_info in word_metadata[""words""]:
                word_infos.append(word_info)";71;5;https://github.com/pziajski/ZRecognition/blob/master/AzureImageRecognition.py;>7
33;c94cf9a0235e7137f88385ab5c88ae6369e736c8;"headers  = {'Ocp-Apim-Subscription-Key': subscription_key, 'Content-Type': 'application/octet-stream'}
    params   = {'language': 'unk', 'detectOrientation ': 'true'}
    data     = {'url': image_url}
    response = requests.post(";63;3;https://github.com/aayushvats/med_id/blob/master/ocr.py;>7
34;00f38ab64ac06074049b0dde2efdba6d52214313;"image_data = open(image_path, ""rb"").read()

    headers  = {'Ocp-Apim-Subscription-Key': subscription_key,
                'Content-Type': 'application/octet-stream'}
    params   = {'visualFeatures': 'Categories,Description,Color'}
    response = requests.post(analyze_url, headers=headers, params=params, data=image_data)
    response.raise_for_status()

    # The 'analysis' object contains various fields that describe the image. The most
    # relevant caption for the image is obtained from the 'description' property.
    analysis = response.json()
    image_caption = analysis[""description""][""captions""][0][""text""].capitalize()";146;6;https://github.com/vishnoitanuj/Azure-tutorials/blob/master/Video_Analysis.py;>7
35;910dc45b477682df33a75979ecb8932612776c35;"""

    image_data = open(image_path, ""rb"").read()

    headers  = {'Ocp-Apim-Subscription-Key': subscription_key,
                'Content-Type': 'application/octet-stream'}
    params   = {'visualFeatures': 'Categories,Description,Color'}
    response = requests.post(
        analyze_url, headers=headers, params=params, data=image_data)
    response.raise_for_status()

    analysis = response.json()";91;4;https://github.com/nrjvarshney/QuoteFromPic/blob/master/quotesServer/quotesServer/quoteapi/views.py;>7
36;f0bc867888c48e59d98da85a88da423465d13d10;"vision_base_url = ""https://westcentralus.api.cognitive.microsoft.com/vision/v2.0/""

    ocr_url = vision_base_url + ""ocr""

    headers  = {'Ocp-Apim-Subscription-Key': subscription_key, 'Content-Type': 'application/octet-stream'}
    params   = {'language': 'unk', 'detectOrientation': 'true'}";79;3;https://github.com/Ujjwal0501/hallucinators/blob/master/Text_Gen.py;>7
37;02fce827f849a37fd59ba18a70852fa1bca546af;")
    response.raise_for_status()

    analysis = response.json()

    # Extract the word bounding boxes and text.
    line_infos = [region[""lines""] for region in analysis[""regions""]]
    word_infos = []
    for line in line_infos:
        for word_metadata in line:
            for word_info in word_metadata[""words""]:
                word_infos.append(word_info)";71;3;https://github.com/WeiShi78/Xbuyer/blob/master/test/Test.py;>7
38;910dc45b477682df33a75979ecb8932612776c35;"assert subscription_key

    vision_base_url = ""https://westcentralus.api.cognitive.microsoft.com/vision/v2.0/""

    analyze_url = vision_base_url + ""analyze""

    image_data = open(image_path, ""rb"").read()
    headers = {'Ocp-Apim-Subscription-Key': subscription_key,
                'Content-Type': 'application/octet-stream'}
    params = {'visualFeatures': 'Categories,Description,Color'}
    response = requests.post(analyze_url, headers=headers, params=params, data=image_data)
    response.raise_for_status()
    analysis = response.json()";123;5;https://github.com/nrjvarshney/QuoteFromPic/blob/master/quotesServer/quotesServer/quoteapi/views.py;>7
39;f75875be86f0f17fc3e9aae98f743f02982e444a;"= [""2000"", ""2001"", ""2002"", ""2003"", ""2004"", ""2005"", ""2006"", ""2007"", ""2008"", ""2009"", ""2010"", ""2011"", ""2012"", ""2013"",
             ""2014"", ""2015"", ""2016"", ""2017""]";74;2;https://github.com/DaviPolita/Dashboards/blob/master/Plotly_Graphs/Animated_Scatter/gender_ineq.py;>7
40;876ad13e615cda2592f907c2739e09faa21477d4;"""2016"", ""2015"", ""2014"", ""2013"", ""2012"", ""2011"", ""2010"", ""2009"", ""2008"", ""2007"", ""2006"", ""2005"", ""2004"", ""2003"", ""2002"", ""2001"", ""2000"", ""1999"", ""1998"", ""1997""";79;2;https://github.com/abhinavbansal19961996/Advocatefinal/blob/master/update.py;>7
41;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
42;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
43;5e9c280ba82bbe9237fe3f8dff0c82dce3bdcf5e;"):
    less = []
    equal = []
    greater = []

    if len(array) > 1:
        pivot = array[0]
        for x in array:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return";68;2;https://github.com/morganhowell95/Algorithms/blob/master/Comparison-Sorts/quick_sort.py;2
44;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
45;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
46;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
47;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
48;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
49;21f646e28b5aa5d074688a587f8cc16d2d05a5b0;"a):
    if len(a) <= 1:
        return a
    pivot = a[len(a) // 2]
    left = [x for x in a if x < pivot]
    middle = [x for x in a if x == pivot]
    right = [x for x in a if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;2;https://github.com/chitn/Algorithms-illustrated-by-Python/blob/master/example/quick_sort.py;2
50;2edbc61bf0f23c785b94c3dd6b178bbc94127f35;"lista):
    if len(lista) <= 1:
        return lista
    pivo = lista[0]
    iguais  = [x for x in lista if x == pivo]
    menores = [x for x in lista if x <  pivo]
    maiores = [x for x in lista if x >  pivo]
    return quicksort(menores) +";66;3;https://github.com/AAMergulhao/Sort_Algorithms/blob/master/algorithms.py;2
51;7457f881c1b82d80957b8acf1859a4a73a7e88b4;"array):
    if len(array) <= 1:
        return array
    pivot = array[len(array) // 2]
    left = [x for x in array if x < pivot]
    middle = [x for x in array if x == pivot]
    right = [x for x in array if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;4;https://github.com/fali007/basic-programming/blob/master/sorting/quicksort.py;2
52;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
	if len(arr) <= 1:
		return arr
	pivot = arr[len(arr) / 2]
	left = [x for x in arr if x < pivot]
	middle = [x for x in arr if x == pivot]
	right = [x for x in arr if x > pivot]
	return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
53;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
54;7457f881c1b82d80957b8acf1859a4a73a7e88b4;"array):
    if len(array) <= 1:
        return array
    pivot = array[len(array) // 2]
    left = [x for x in array if x < pivot]
    middle = [x for x in array if x == pivot]
    right = [x for x in array if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;4;https://github.com/fali007/basic-programming/blob/master/sorting/quicksort.py;2
55;d730f06e052b92b5241b0feb5b7436ad708f79b1;"arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) / 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)";79;6;https://github.com/yvprashanth/python-google-tutorial/blob/master/basic/quicksort.py;2
56;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
57;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
58;be05fb926bf6d0f5b10addd65a7bd26bf41a466e;"# Plot the decision boundary. For that, we will assign a color to each
    # point in the mesh [x_min, x_max]x[y_min, y_max].
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].";89;2;https://github.com/mszhai/nlp_algo/blob/master/test/pd.py;1
59;c054698149636d13ae8ad1ed97459812d0d1ebbc;"fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    n = 100
    for c, m, zl, zh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:
        xs = randrange(n, 23, 32)
        ys = randrange(n, 0, 100)
        zs = randrange(n, zl, zh)
        ax.scatter(xs, ys, zs, c=c, marker=m)";115;5;https://github.com/afding/mylab/blob/master/algrithm/3dplot.demo.py;0
60;f4e6dcf3008410acb9d95b2ba78645b12f5eebf8;"]x[y_min, y_max].
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

    # Put the result into a color plot
    Z = Z.reshape(xx.shape)
    pl.figure(1, figsize=(4, 3))
    pl.pcolormesh(xx, yy, Z, cmap=pl.cm.Paired)

    # Plot also the training points
    pl.scatter(X[:, 0], X[:, 1], c=Y,
⋯
, cmap=pl.cm.Paired)
    pl.xlabel('Sepal length')
    pl.ylabel('Sepal width')

    pl.xlim(xx.min(), xx.max())
    pl.ylim(yy.min(), yy.max())
    pl.xticks(())
    pl.yticks(())

    pl.show()";279;14;https://github.com/v3ss0n/scikit-learn/blob/master/examples/svm/plot_svm_iris.py;0
61;a80fef7436689974cff2664b4a0e8160c74a06a2;"from matplotlib import rc
    rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
    ## for Palatino and other serif fonts use:
    #rc('font',**{'family':'serif','serif':['Palatino']})
    rc('text', usetex=True)";85;5;https://github.com/kmandli/ML-python-code-without-LIBRARIES/blob/master/linear_regression_cost_function.py;0
62;c690d3284caf91996572b047fbe5425c93d8e25e;"')

    # Data for three-dimensional scattered points
    zdata = 15 * np.random.random(100)
    xdata = np.sin(zdata) + 0.1 * np.random.randn(100)
    ydata = np.cos(zdata) + 0.1 * np.random.randn(100)
    ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='";81;3;https://github.com/TheRealMarcusChiu/PythonMasterExample/blob/master/src/third-party/03_graphs/3d/scatter.py;0
63;9303cf4b43f8b33a958f1b0025bd2a07f2798e80;"# Importing the dataset
    dataset = pd.read_csv('Social_Network_Ads.csv')
    X = dataset.iloc[:, [2, 3]].values
    y = dataset.iloc[:, 4].values

    # Splitting the dataset into the Training set and Test set
    from sklearn.cross_validation import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

    # Feature Scaling
    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)

    # Fitting classifier to the Training set
    from sklearn.svm import SVC
    classifier = SVC(kernel = 'linear', random_state = 0)
    classifier.fit(X_train, y_train)

    # Predicting the Test set results
    y_pred = classifier.predict(X_test)

    # Making the Confusion Matrix
    from sklearn.metrics import confusion_matrix
    cm = confusion_matrix(y_test, y_pred)

    # Visualising the Training set results
    from matplotlib.colors import ListedColormap
    X_set, y_set = X_train, y_train
    X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                         np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
    plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
                 alpha = 0.75, cmap =";341;22;https://github.com/ranasingh-gkp/Machine-Learning/blob/master/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/Python_SVM.py;0
64;5e9c280ba82bbe9237fe3f8dff0c82dce3bdcf5e;"):
    less = []
    equal = []
    greater = []
    if len(array) > 1:
        pivot = array[0]
        for x in array:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return";68;2;https://github.com/morganhowell95/Algorithms/blob/master/Comparison-Sorts/quick_sort.py;2
65;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
66;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
67;68813c1284352872db9a5abdaaaabf8c8e21c16d;['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DWDP','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX',';106;3;https://github.com/parsa3000/SE18/blob/master/stockgame2/home/listofstockscrypto.py;>7
68;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
69;3a162697d1abaa9ffb4d3f14ff97828c642ea427;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';99;2;https://github.com/quentintruong/Stocks-Scraper/blob/master/stocks/spiders/stocks_spider.py;>7
70;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
71;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
72;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
73;886bc47941eadd52a758206094854c8505d85410;', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z';101;5;https://github.com/andrewmagis/docker/blob/master/ipython-dev/Qiime/qiime/split_libraries_fastq.py;0
74;5b2bf24b4ae3a8c68dc4e52c1e5bdca89af216c4;= {0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20, 21:21, 22:22, 23:23, 24:;100;3;https://github.com/cnrat/dec-eve-serenity/blob/master/client/encodings/cp864.py;1
75;5b2bf24b4ae3a8c68dc4e52c1e5bdca89af216c4;= {0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20, 21:21, 22:22, 23:23, 24:;100;3;https://github.com/cnrat/dec-eve-serenity/blob/master/client/encodings/cp864.py;1
76;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,;96;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
77;af4b00fee4953dec519c7e35e3163f60609466dc;s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14],s[15],s[16],s[17];89;4;https://github.com/wjwainwright/Capstone/blob/master/IsoFitv18.py;>7
78;eb3ae194c4c2eb8719db5c353485c3e31831f1ac;"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"",
                          tuple(";64;4;https://github.com/labopvlab/PythonDataAnalyzer/blob/master/apps/mergingDBs_v1.py;>7
79;8f0abf15d48fe3c7357ed453ba8bb45dbd536d07;"lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    r = 6371
    return c * r * 1000";83;6;https://github.com/TimothyLx/Mining-method-based-on-semantic-trajectory-frequent-pattern-and-carpooling-application/blob/master/distance_calculate.py;6
80;a4c3d2c979c489e47c250f5fd3402328044f19fa;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    km = 6367 * c
    return km";113;5;https://github.com/NervosaX/reparser/blob/master/modules/gmaps.py;6
81;a4c3d2c979c489e47c250f5fd3402328044f19fa;"""""""
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """"""
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    km = 6367 * c
    return km";113;5;https://github.com/NervosaX/reparser/blob/master/modules/gmaps.py;6
82;8c76f07cfbfa90928d72dcf76029b44d8e9eb21c;"# convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    r = 6371  # Radius of earth in kilometers. Use 3956 for miles
    return c * r";101;5;https://github.com/sarbjot-14/SFU/blob/master/cmpt353/e3/GPS_Tracks/calc_distance.py;6
83;b3326f25c405bab05ae8898a978dcd1bb27358b0;"parser = argparse.ArgumentParser(description='PyTorch CIFAR10 Training')
    parser.add_argument('--lr', default=0.1, type=float, help='learning rate')
    parser.add_argument('--resume', '-r', action='store_true', help='resume from checkpoint')
    args = parser.parse_args()";77;5;https://github.com/THULimy/pytorch-Hscore/blob/master/cifar-resnet.py;1
84;21f646e28b5aa5d074688a587f8cc16d2d05a5b0;"a):
    if len(a) <= 1:
        return a
    pivot = a[len(a) // 2]
    left = [x for x in a if x < pivot]
    middle = [x for x in a if x == pivot]
    right = [x for x in a if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;2;https://github.com/chitn/Algorithms-illustrated-by-Python/blob/master/example/quick_sort.py;1
85;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
86;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
87;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
88;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
89;fde8fae9d13625d97b7d39342bbc9100a42cf8d9;= ['Date/Time', 'Temp (°C)', 'Dew Point Temp (°C)', 'Rel Hum (%)', 'Wind Dir (10s deg)', 'Wind Spd (km/h)', 'Visibility (km)', 'Stn Press (kPa)', ';69;4;https://github.com/patrickacheung/weather-tod-predictor/blob/master/clean_weather.py;>7
90;f2ed15c0121fc4d4ab8d3c0c87c3c745aa05853f;= ['Date/Time', 'Year', 'Month', 'Day', 'Time', 'Data Quality', 'Temp (°C)', 'Temp Flag', 'Dew Point Temp (°C)', 'Dew Point Temp Flag', 'Rel Hum (%)', 'Rel Hum Flag', 'Wind Dir;76;3;https://github.com/iss4e/webike-toolchain/blob/master/webike/data/WeatherGC.py;>7
91;8288745b3d457294b33551ac7a3d6d8d391c44fa;"headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'
    }
    response = requests.get(url, headers=headers)";65;2;https://github.com/ZhekunInc/football-wiki/blob/master/src/scraping/management/commands/fifa_country.py;4
92;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
93;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
94;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
95;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr)/2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";77;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
96;47081907e60f9f9cab0effee35db245a5b7003a6;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
97;47081907e60f9f9cab0effee35db245a5b7003a6;":
    if len(arr) <= 1 :
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";76;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
98;47081907e60f9f9cab0effee35db245a5b7003a6;":
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";76;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
99;47081907e60f9f9cab0effee35db245a5b7003a6;":
	if len(arr) <= 1 :
		return arr
	pivot = arr[len(arr) // 2]
	left = [x for x in arr if x < pivot]
	middle = [x for x in arr if x == pivot]
	right = [x for x in arr if x > pivot]
	return quicksort(left) + middle + quicksort(right)";76;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
100;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";74;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
101;47081907e60f9f9cab0effee35db245a5b7003a6;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";75;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
102;47081907e60f9f9cab0effee35db245a5b7003a6;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";75;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
103;47081907e60f9f9cab0effee35db245a5b7003a6;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";75;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;1
104;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";74;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;1
105;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49;97;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;4
106;43d142060c012adf5436e71991f17b8e81168311;[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,;439;1;https://github.com/youngminpark2559/temp_for_study/blob/master/study_huggingface_NLP/examples/My_test/Test_BERT_LM_model.py;1
107;9ebe0da4eabfbbd56a5cdd9704fb6c3872162936;"Config(object):
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    MAIL_SERVER = os.environ.get('MAIL_SERVER')
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 25)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get(";130;4;https://github.com/vitalii-levko/microblog/blob/master/microblog/config.py;2
108;9ebe0da4eabfbbd56a5cdd9704fb6c3872162936;"Config(object):
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    MAIL_SERVER = os.environ.get('MAIL_SERVER')
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 25)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get(";130;4;https://github.com/vitalii-levko/microblog/blob/master/microblog/config.py;2
109;59b316cdb58c43d28de33d284ed7b8ac9bab06ba;if y != '0' and y != '1' and y != '2' and y != '3' and y != '4' and y != '5' and y != '6' and y != '7' and y != '8' and y != '9' and y != ';75;2;https://github.com/duongd08/CECS-174-Spring-2018/blob/master/Uno.py;>7
110;8b515e8a34021fe09632bd8387ef3a9734bb1c1b;', 'AMD', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', 'LNT;68;2;https://github.com/rorygwozdz/coding/blob/master/finance/gcg/image_creator.py;>7
111;7ebb786cd066594187910cfba3b3e58c3603b02d;', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', 'LNT', 'ALL', 'GOOGL', 'GOOG', 'MO', 'AMZN', 'AEE', 'AAL', 'AEP', 'AXP', 'AIG', 'AMT', 'AWK', 'AMP', 'ABC', 'AME', 'AMGN', 'APH', 'APC', 'ADI', 'ANDV', 'ANSS', 'ANTM', 'AON', 'AOS', 'APA', 'AIV', 'AAPL', 'AMAT', 'APTV', 'ADM', 'ARNC', 'AJG', 'AIZ', 'T', 'ADSK', 'ADP', 'AZO', 'AVB', 'AVY', ';223;15;https://github.com/Shiva-gs/Project3/blob/master/stock_data.py;>7
112;7ebb786cd066594187910cfba3b3e58c3603b02d;', 'ALL', 'GOOGL', 'GOOG', 'MO', 'AMZN', 'AEE', 'AAL', 'AEP', 'AXP', 'AIG', 'AMT', 'AWK', 'AMP', 'ABC', 'AME', 'AMGN', 'APH', 'APC', 'ADI', 'ANDV', 'ANSS', 'ANTM', 'AON', 'AOS', 'APA', 'AIV', 'AAPL', 'AMAT', 'APTV', 'ADM', 'ARNC', 'AJG', 'AIZ', 'T', 'ADSK', 'ADP', 'AZO', 'AVB', 'AVY', 'BHGE', 'BLL', 'BAC', 'BK', 'BAX', 'BBT', 'BDX', 'BRK.B', 'BBY', 'BIIB', 'BLK', 'HRB', 'BA', 'BWA', 'BXP', 'BSX',;224;10;https://github.com/Shiva-gs/Project3/blob/master/stock_data.py;>7
113;7ebb786cd066594187910cfba3b3e58c3603b02d;', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', 'LNT', 'ALL', 'GOOGL', 'GOOG', 'MO', 'AMZN', 'AEE', 'AAL', 'AEP', 'AXP', 'AIG', 'AMT', 'AWK', 'AMP', 'ABC', 'AME', 'AMGN', 'APH', 'APC', 'ADI', 'ANDV', 'ANSS', 'ANTM', 'AON', 'AOS', 'APA', 'AIV', 'AAPL', 'AMAT', 'APTV', 'ADM', 'ARNC', 'AJG', 'AIZ', 'T', 'ADSK', 'ADP', 'AZO', 'AVB', 'AVY', 'BHGE', 'BLL', 'BAC', 'BK', 'BAX', 'BBT', 'BDX', 'BRK.B', 'BBY', 'BIIB', 'BLK', 'HRB', 'BA', 'BWA', 'BXP', 'BSX', 'BHF', 'BMY', 'AVGO', 'BF.B', 'CHRW', 'CA', 'COG', ';319;19;https://github.com/Shiva-gs/Project3/blob/master/stock_data.py;>7
114;687774b16d0478f4bf1aca760b628253d21d3267;"if n == 1:
        return False
    elif n < 4:
        return True
    elif n%2 == 0:
        return False
    elif n < 9:
        return True
    elif n%3 == 0:
        return False
    else:
        r = int(n**0.5)
        f = 5
        while f <= r:
            if n%f == 0:
                return False";74;3;https://github.com/redmechanic/My-Project-Euler-Solutions/blob/master/Problem 27/prime_quadratic.py;2
115;c61d42e2a6eaf8c9c9b03d4ebc15e6a9ec999768;"print(now.strftime(""%Y-%m-%d %H:%M:%S""))
    print(now.strftime(""%Y-%m-%d""))
    print(now.strftime(""%H:%M:%S""))";62;2;https://github.com/contsman/pythonweb/blob/master/testpython/Commonly_used_builtin_module.py;>7
116;964357c438769c177a2c14743aa82fa875ac2d80;",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        """;140;8;https://github.com/da-woods/cython/blob/master/setup.py;>7
117;964357c438769c177a2c14743aa82fa875ac2d80;""",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",";119;6;https://github.com/da-woods/cython/blob/master/setup.py;>7
118;1324ed920d6ad53fd3322f862703051161d16b4f;"@gmail.com"",
    license=""MIT"",
    classifiers=[
        ""Development Status :: 3 - Alpha"",
        ""Intended Audience :: Developers"",
        ""Topic :: Software Development :: Build Tools"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 3";66;3;https://github.com/ylathouris/glossy/blob/master/setup.py;>7
119;9da3365c7b91281b7073c07c495ff3033dfaa543;"(G, start, end=None):
    """"""
    Find shortest paths from the start vertex to all
    vertices nearer than or equal to the end.

    The input graph G is assumed to have the following
    representation: A vertex can be any object that can
    be used as an index into a dictionary.  G is a
    dictionary, indexed by vertices.  For any vertex v,
    G[v] is itself a dictionary, indexed by the neighbors
    of v.  For any edge v->w, G[v][w] is the length of
    the edge.  This is related to the representation in
    <http://www.python.org/doc/essays/graphs.html>
    where Guido van Rossum suggests representing graphs
    as dictionaries mapping vertices to lists of neighbors,
    however dictionaries of edges have many advantages
    over lists: they can store extra information (here,
    the lengths), they support fast existence tests,
    and they allow easy modification of the graph by edge
    insertion and removal.  Such modifications are not
    needed here but are important in other graph algorithms.
    Since dictionaries obey iterator protocol, a graph
    represented as described here could be handed without
    modification to an algorithm using Guido's representation.

    Of course, G and G[v] need not be Python dict objects;
    they can be any other object that obeys dict protocol,
    for instance a wrapper in which vertices are URLs
    and a call to G[v] loads the web page and finds its links.
    
    The output is a pair (D,P) where D[v] is the distance
    from start to v and P[v] is the predecessor of v along
    the shortest path from s to v.
    
    Dijkstra's algorithm is only guaranteed to work correctly
    when all edge lengths are positive. This code does not
    verify this property for all edges (only the edges seen
    before the end vertex is reached), but will correctly
    compute shortest paths even for some graphs with negative
    edges, and will raise an exception if it discovers that
    a negative edge";396;18;https://github.com/bachiraoun/pdbparser/blob/master/Utilities/Collection.py;2
120;9da3365c7b91281b7073c07c495ff3033dfaa543;"(G, start, end=None):
    """"""
    Find shortest paths from the start vertex to all
    vertices nearer than or equal to the end.

    The input graph G is assumed to have the following
    representation: A vertex can be any object that can
    be used as an index into a dictionary.  G is a
    dictionary, indexed by vertices.  For any vertex v,
    G[v] is itself a dictionary, indexed by the neighbors
    of v.  For any edge v->w, G[v][w] is the length of
    the edge.  This is related to the representation in
    <http://www.python.org/doc/essays/graphs.html>
    where Guido van Rossum suggests representing graphs
    as dictionaries mapping vertices to lists of neighbors,
    however dictionaries of edges have many advantages
    over lists: they can store extra information (here,
    the lengths), they support fast existence tests,
    and they allow easy modification of the graph by edge
    insertion and removal.  Such modifications are not
    needed here but are important in other graph algorithms.
    Since dictionaries obey iterator protocol, a graph
    represented as described here could be handed without
    modification to an algorithm using Guido's representation.

    Of course, G and G[v] need not be Python dict objects;
    they can be any other object that obeys dict protocol,
    for instance a wrapper in which vertices are URLs
    and a call to G[v] loads the web page and finds its links.
    
    The output is a pair (D,P) where D[v] is the distance
    from start to v and P[v] is the predecessor of v along
    the shortest path from s to v.
    
    Dijkstra's algorithm is only guaranteed to work correctly
    when all edge lengths are positive. This code does not
    verify this property for all edges (only the edges seen
    before the end vertex is";367;17;https://github.com/bachiraoun/pdbparser/blob/master/Utilities/Collection.py;2
121;b32657aa5d791091bd6992730a1a48d8b4b1152f;= {'Name':pd.Series(['Tom','James','Ricky','Vin','Steve','Minsu','Jack','Lee','David','Gasper','Betina','Andres']),;61;1;https://github.com/wojiaolds/python-test/blob/master/pandas_test/dataframe_base.py;3
122;209e809060efff74c137c9b7c69d5d5168bff92a;2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13;91;3;https://github.com/odolan/Game-of-War-Predictor-/blob/master/War Predictor/GameOfWar.py;>7
123;bd0d429e0742b94a8b820221dd64c909f7b47c13;, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,;73;2;https://github.com/rogerkenny/pystuff/blob/master/Solutions.py;>7
124;b32657aa5d791091bd6992730a1a48d8b4b1152f;= {'Name':pd.Series(['Tom','James','Ricky','Vin','Steve','Minsu','Jack','Lee','David','Gasper','Betina','Andres']),;61;1;https://github.com/wojiaolds/python-test/blob/master/pandas_test/dataframe_base.py;3
125;b32657aa5d791091bd6992730a1a48d8b4b1152f;= {'Name':pd.Series(['Tom','James','Ricky','Vin','Steve','Minsu','Jack','Lee','David','Gasper','Betina','Andres']),;61;1;https://github.com/wojiaolds/python-test/blob/master/pandas_test/dataframe_base.py;3
126;eb52f02463b6ed46f0ffbbe2e15a65998cc778d4;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t;141;2;https://github.com/dbc1040/WeiboCrawler/blob/master/weibocrawler/proc_user_pages.py;1
127;46a01cf8cb75ac9b2b7e223e22f1575d0cf1320d;"object.

  Fields:
    filter: The standard list filter.
    name: The name of the operation's parent resource.
    pageSize: The standard list page size.
    pageToken: The standard list page token.
  """"""

  filter = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)";86;3;https://github.com/munishgarg-02/GoogleAPI/blob/master/google-cloud-sdk/lib/googlecloudsdk/third_party/apis/dialogflow/v2/dialogflow_v2_messages.py;0
128;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,;100;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;0
129;e0dead7e27af4a6122ccff07904c4d91137f59d9;"():
    resp = requests.get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text
        tickers.append(ticker)";101;5;https://github.com/RajputJay41/python-for-finance/blob/master/automating and getting  s&p list.py;6
130;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47;93;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
131;24657fc9722b450bcb7afda9c2cbfa54d356d80f;"home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path =";46;1;https://github.com/lucaspbordignon/sgbcloud/blob/master/src/nlp.py;>7
132;287df0f319785e386cb64eda635766799a1b731d;"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""""",
        (row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10]";81;2;https://github.com/devichs/Python-Bball-Stats/blob/master/shotStat.py;>7
133;507245517ceb9d0e901a142ad45a421ee0cc008b;"', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate', 'X-Requested-With': 'XMLHttpRequest', 'Referer': 'http://";79;3;https://github.com/lianghq7/get_url/blob/master/qunaer/qunaer.py;>7
134;45074562bee9d4f6d264fe9a484446a6ab78dd34;"# Copyright (C) 2010 Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import unittest

from webkitpy.common.system.outputcapture import OutputCapture
from webkitpy.thirdparty.mock import Mock
from webkitpy.tool.commands.rebaseline import *
from webkitpy.tool.mocktool import MockTool, MockOptions";331;24;https://github.com/auroranockert/webkit/blob/master/Tools/Scripts/webkitpy/tool/commands/rebaseline_unittest.py;0
135;3a066157e3ff2c9b6b148ae7da3f4f6887c6379d;"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""
This code implements a basic, Twitter-aware tokenizer.

A tokenizer is a function that splits a string of text into words. In
Python terms, we map string and unicode objects into lists of unicode
objects.

There is not a single right way to do tokenizing. The best method
depends on the application.  This tokenizer is designed to be flexible
and this easy to adapt to new domains and tasks.  The basic logic is
this:

1. The tuple regex_strings defines a list of regular expression
   strings.

2. The regex_strings strings are put, in order, into a compiled
   regular expression object called word_re.

3. The tokenization is done by word_re.findall(s), where s is the
   user-supplied string, inside the tokenize() method of the class
   Tokenizer.

4. When instantiating Tokenizer objects, there is a single option:
   preserve_case.  By default, it is set to True. If it is set to
   False, then the tokenizer will downcase everything except for
   emoticons.

The __main__ method illustrates by tokenizing a few examples.

I've also included a Tokenizer method tokenize_random_tweet(). If the
twitter library is installed (http://code.google.com/p/python-twitter/)
and Twitter is cooperating, then it should tokenize a random
English-language tweet.
""""""

__author__ = ""Christopher Potts""
__copyright__ = ""Copyright 2011, Christopher Potts""
__credits__ = []
__license__ = ""Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License: http://creativecommons.org/licenses/by-nc-sa/3.0/""
__version__ = ""1.0""
__maintainer__ = ""Christopher Potts""
__email__ = ""See the author's website""";360;23;https://github.com/roelvanderburg/Sentiment-Analysis/blob/master/tweet_tokenizer.py;0
136;c101dc6dd83eca9260fbfc0369979a7965240df4;s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d;100;1;https://github.com/lucamassarelli/AMFC-BRCT/blob/master/core/MetricsCollector.py;4
137;a805fae6363210162f97e35e88cd8aec0ac453a9;"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:";86;2;https://github.com/rckirby/loopy/blob/master/loopy/diagnostic.py;3
138;a805fae6363210162f97e35e88cd8aec0ac453a9;"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:";86;2;https://github.com/rckirby/loopy/blob/master/loopy/diagnostic.py;3
139;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,;100;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
140;34819bf6e7c8d452fbd0c131403c453a11338308;"(function):
    if getattr(function, ATTR_EXPECTS_NAMESPACE_OBJECT, False):
        return

    spec = get_arg_spec(function)

    defaults = dict(zip(*[reversed(x) for x in (spec.args,
                                                spec.defaults or [])]))
    defaults.update(getattr(spec, 'kwonlydefaults', None) or {})

    kwonly = getattr(spec, 'kwonlyargs', [])

    if sys.version_info < (3,0):
        annotations = {}
    else:
        annotations = dict((k,v) for k,v in function.__annotations__.items()
                           if isinstance(v, str))";128;4;https://github.com/jumpscale7/web/blob/master/pythonlib/argh/assembling.py;>7
141;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,;98;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
142;971a5155a320a23115a41d16f14b6ccc6ffe9801;,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53;100;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
143;146055c776a42d50e98ffd46b5e6fbe5aca46707;"The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions";62;1;https://github.com/tadiphone-caf/bootable_bootloader_edk2/blob/master/QcomModulePkg/Tools/image_header.py;0
144;b180c23466aeb19f0e063e72e078778ffc9918b5;>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>', '<p>;103;1;https://github.com/DixonShen/paper_work1/blob/master/v3/v3_utils.py;1
145;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,;98;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
146;e2ed4a8c5b4df153be23cdfe09e9753c21631f56;"[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        visit = [0 for _ in range(numCourses)]
        for x, y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs";63;2;https://github.com/varun21290/leetcode_solutions/blob/master/Course Schedule/Solution.py;2
147;29e7bb8572b9d802dda47c3dda901f3c44a5504d;'2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046',;100;3;https://github.com/HauHe/OSeMBEtoREEEMdb/blob/master/results_processing/txt_to_df.py;0
148;d3fd8267c90805fcb17e609d7f96a6fc376eb881;'2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001', '2000', '1999', '1998', '1997', '1996', '1995', '1994', '1993', '1992', '1991', '1990';115;4;https://github.com/pnxenopoulos/cs-communities/blob/master/prepare-data/process_data.py;0
149;29e7bb8572b9d802dda47c3dda901f3c44a5504d;2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046', ';100;3;https://github.com/HauHe/OSeMBEtoREEEMdb/blob/master/results_processing/txt_to_df.py;0
150;d3fd8267c90805fcb17e609d7f96a6fc376eb881;'2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001', '2000', '1999', '1998', '1997', '1996', '1995', '1994', '1993', '1992', '1991', '1990';115;4;https://github.com/pnxenopoulos/cs-communities/blob/master/prepare-data/process_data.py;0
151;29e7bb8572b9d802dda47c3dda901f3c44a5504d;'2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046',;100;3;https://github.com/HauHe/OSeMBEtoREEEMdb/blob/master/results_processing/txt_to_df.py;0
152;fc6fc80b7defa2838dc26c92a245648646d24f17;"(r""^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""";91;3;https://github.com/Zenithar/cuckoo-modified/blob/master/web/web/settings.py;>7
153;fc6fc80b7defa2838dc26c92a245648646d24f17;"(r""^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01";75;3;https://github.com/Zenithar/cuckoo-modified/blob/master/web/web/settings.py;>7
154;0b72bbb9d93a63b5da7c49c438e6cd10df9283e5;"',
    classifiers=[
        'Development Status :: 2 - Pre-Alpha',
        'Framework :: Django',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',";113;4;https://github.com/dominicrodger/djangofinance/blob/master/setup.py;0
155;0e3d2aa266b13e6a7f62b708d8fb4ba0a43cdb25;"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""
Copyright (c) 2014-2015 pocsuite developers (http://seebug.org)
See the file 'docs/COPYING' for copying permission
""""""
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req 
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase";106;3;https://github.com/vulscanteam/vulscan/blob/master/vul/49-Nginx-Remote-Integer-Overflow.py;0
156;ec98dbafc2251a08cb676e29f9af05b779fbf542;"# -*- coding: utf-8 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from configlets import *";176;9;https://github.com/BackupTheBerlios/destar-svn/blob/master/branches/icom-avatar/cfg_app_meetme.py;0
157;640099e1563924a7ab8373807462716eb43273e7;"HANGMAN = (
""""""
 ------
 |    |
 |
 |
 |
 |
 |
 |
 |
----------
"""""",
""""""
 ------
 |    |
 |    O
 |
 |
 |
 |
 |
 |
----------
"""""",
""""""
 ------
 |    |
 |    O
 |   -+-
 | 
 |   
 |   
 |   
 |   
----------
"""""",
""""""
 ------
 |    |
 |    O
 |  /-+-
 |   
 |   
 |   
 |   
 |   
----------
"""""",
""""""
 ------
 |    |
 |    O
 |  /-+-/
 |   
 |   
 |   
 |   
 |   
----------
"""""",
""""""
 ------
 |    |
 |    O
 |  /-+-/
 |    |
 |   
 |   
 |   
 |   
----------
"""""",
""""""
 ------
 |    |
 |    O
 |  /-+-/
 |    |
 |    |
 |   | 
 |   | 
 |   
----------
"""""",
""""""
 ------
 |    |
 |    O
 |  /-+-/
 |    |
 |    |
 |   | |
 |   | |
 |  
----------
"""""")

MAX_WRONG = len(HANGMAN) - 1
WORDS = (""OVERUSED"", ""CLAM"", ""GUAM"", ""TAFFETA"", ""PYTHON"")";223;10;https://github.com/theglitchmitch/M3-Learning-Python/blob/master/Chapter_5/Hangman_Game.py;5
158;0fc3a34d1254d5dc319c792ea0b8c0c9a15ee786;"HANGMAN_PICS = ['''
  +---+
      |
      |
      |
     ===''', '''
  +---+
  O   |
      |
      |
     ===''', '''
  +---+
  O   |
  |   |
      |
     ===''', '''
  +---+
  O   |
 /|   |
      |
     ===''', '''
  +---+
  O   |
 /|\  |
      |
     ===''', '''
  +---+
  O   |
 /|\  |
 /    |
     ===''', '''
  +---+
  O   |
 /|\  |
 / \  |
     ===''', '''
  +---+
 [O   |
 /|\  |
 / \  |
     ===''', '''
  +---+
 [O]  |
 /|\  |
 / \  |
     ===''']
⋯
= 'ant baboon badger bat bear beaver camel cat clam cobra cougar coyote crow deer dog donkey duck eagle ferret fox frog goat goose hawk lion lizard llama mole monkey moose mouse mule newt otter owl panda parrot pigeon python rabbit ram rat raven rhino salmon seal shark sheep skunk sloth snake spider stork swan tiger toad trout turkey turtle weasel whale wolf wombat zebra'.split()";272;15;https://github.com/ShulinLiu/PythonNote/blob/master/Games/hangman.py;5
159;aa88d5324a6c0b45becff4fac72e7b92c753684a;", 'html.parser')
    table = soup.find('table', attrs={'class':'wikitable sortable'})
    rows = table.find_all('tr')
    for row in rows :
        cols = row.find_all('td')
        if len(cols) ==";62;2;https://github.com/jaeteekae/DelayedTwitter/blob/master/get_top_twitter_accounts.py;5
160;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92,;100;5;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
161;e47ed3a97799388b6100bb67048e6ad8c0e4da5f;i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15],i[16],i[17],i[18],i[19],i[20],i[21],i[22],i[23],i[24],i[25],i[26],i[27],i[28],i[29],i[30],i[31],i[32],i[33],i[34],i[35],i[36],i[37],i[38],i[39],i[40],i[41],i[42],i[43],i[44],i;226;12;https://github.com/genezonxiii/Population_Data/blob/master/population_data/age_education.py;>7
162;26baf8973a6c2bb1a52ea72d6da4a2e552a10ebc;".read().decode()
    stock_data = []
    split_source = source_code.split('\n')
    for line in split_source:
        split_line = line.split(',')
        if len(split_line) == 6:
            if 'values' not in line and 'labels' not in line:
                stock_data.append(line)
    date, closep, highp, lowp, openp, volume = np.loadtxt(stock_data,
                                                          delimiter=',',
                                                          unpack=True,
                                                          converters={0: bytespdate2num('%Y%m%d')})";114;4;https://github.com/rishikksh20/matplotlib/blob/master/customizationExamples.py;6
163;0837e9d3e9367fd29476288ee8a1bad8d45f2466;0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26,;100;5;https://github.com/samta/nonlinear_regression/blob/master/data.py;>7
164;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
165;81c282288dfee4875a4f8e004d5f3a6ccdd2a49f;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';115;3;https://github.com/ctcpbl2004/Machine_Learning_For_Investment/blob/master/Volatility Classification.py;>7
166;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
167;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
168;a272bcee535cdfdaeb6c1472e475e76cb0e2e3fa;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DWDP','XOM','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ','V','WMT';117;3;https://github.com/seantrinh/thewolvesofwallstreet/blob/master/copy_run.py;>7
169;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
170;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';95;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
171;80e251e4e9f8b0f9ac0207bf84a036f040e10cb2;")
    df['100ma'] = df['Adj Close'].rolling(window=100,min_periods=0).mean()
    df_ohlc = df['Adj Close'].resample('10D').ohlc()
    df_volume = df['Volume'].resample('10D').sum()
    df_ohlc.reset_index(inplace=True)
    df_ohlc['Date'] = df_ohlc['Date'].map(mdates.date2num)
    ax1 = plt.subplot2grid((6,1),(0,0),rowspan=5,colspan=1)
    ax2 = plt.subplot2grid((6,1),(5,0),rowspan=1,colspan=1,sharex=ax1)
    ax1.xaxis_date()
    candlestick_ohlc(ax1,df_ohlc.values,width=2,colorup='g')
    ax2.fill_between(df_volume.index.map(mdates.date2num),df_volume.values,0)";197;12;https://github.com/SombrHeroQc/Finance101/blob/master/investing101.py;>7
172;7ebb786cd066594187910cfba3b3e58c3603b02d;= ['MMM', 'ABT', 'ABBV', 'ACN', 'ATVI', 'AYI', 'ADBE', 'AMD', 'AAP', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', 'LNT;100;4;https://github.com/Shiva-gs/Project3/blob/master/stock_data.py;>7
173;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
174;81c282288dfee4875a4f8e004d5f3a6ccdd2a49f;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';115;3;https://github.com/ctcpbl2004/Machine_Learning_For_Investment/blob/master/Volatility Classification.py;>7
175;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
176;81c282288dfee4875a4f8e004d5f3a6ccdd2a49f;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';115;3;https://github.com/ctcpbl2004/Machine_Learning_For_Investment/blob/master/Volatility Classification.py;>7
177;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
178;81c282288dfee4875a4f8e004d5f3a6ccdd2a49f;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';115;3;https://github.com/ctcpbl2004/Machine_Learning_For_Investment/blob/master/Volatility Classification.py;>7
179;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
180;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
181;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
182;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
183;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
184;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
185;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
186;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
187;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
188;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
189;68813c1284352872db9a5abdaaaabf8c8e21c16d;['MMM', 'AXP', 'AAPL', 'BA', 'CAT', 'CVX', 'CSCO', 'KO', 'DIS', 'DWDP', 'XOM', 'GE', 'GS', 'HD', 'IBM', 'INTC', 'JNJ', 'JPM', 'MCD', 'MRK', 'MSFT', 'NKE', 'PFE', 'PG', 'TRV', ';102;3;https://github.com/parsa3000/SE18/blob/master/stockgame2/home/listofstockscrypto.py;>7
190;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';95;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
191;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';95;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
192;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';95;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
193;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47;93;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
194;ef289839bba660b1ea8e7dfbf6ede70578ead0e3;"# 1                                                          
# 2                                                          
# 3                                                          
# 4                                                          
# 5                                                          
# 6                                                          
# 7                                                          
# 8                                                          
# 9                                                          
# 10                                                         
# 11                                                         
# 12                                                         
# 13                                                         
# 14                                                         
# 15                                                         
# 16                                                         
# 17                                                         
# 18                                                         
# 19                                                         
# 20                                                         
# 21                                                         
# 22                                                         
# 23                                                         
# 24                                                         
# 25                                                         
# 26                                                         
# 27                                                         
# 28                                                         
# 29                                                         
# 30                                                         
# 31                                                         
# 32                                                         
# 33                                                         
# 34                                                         
# 35                                                         
# 36                                                         
# 37                                                         
# 38                                                         
# 39                                                         
# 40                                                         
# 41                                                         
# 42                                                         
# 43                                                         
# 44                                                         
# 45                                                         
# 46                                                         
# 47                                                         
# 48                                                         
# 49                                                         
# 50                                                         
# 51                                                         
# 52                                                         
# 53                                                         
# 54                                                         
# 55                                                         
# 56                                                         
# 57                                                         
# 58                                                         
# 59                                                         
# 60                                                         
# 61                                                         
# 62                                                         
# 63                                                         
# 64                                                         
# 65";130;5;https://github.com/MReneBrown/Python-Course/blob/master/Function_Syntax.py;>7
195;ef289839bba660b1ea8e7dfbf6ede70578ead0e3;"# 1                                                                 
# 2                                                                 
# 3                                                                 
# 4                                                                 
# 5                                                                 
# 6                                                                 
# 7                                                                 
# 8                                                                 
# 9                                                                 
# 10                                                                 
# 11                                                                 
# 12                                                                 
# 13                                                                 
# 14                                                                 
# 15                                                                 
# 16                                                                 
# 17                                                                 
# 18                                                                 
# 19                                                                 
# 20                                                                 
# 21                                                                 
# 22                                                                 
# 23                                                                 
# 24                                                                 
# 25                                                                 
# 26                                                                 
# 27                                                                 
# 28                                                                 
# 29                                                                 
# 30                                                                 
# 31                                                                 
# 32                                                                 
# 33                                                                 
# 34                                                                 
# 35                                                                 
# 36                                                                 
# 37                                                                 
# 38                                                                 
# 39                                                                 
# 40                                                                 
# 41                                                                 
# 42                                                                 
# 43                                                                 
# 44                                                                 
# 45                                                                 
# 46                                                                 
# 47                                                                 
# 48                                                                 
# 49                                                                 
# 50                                                                 
# 51                                                                 
# 52                                                                 
# 53                                                                 
# 54                                                                 
# 55                                                                 
# 56                                                                 
# 57                                                                 
# 58                                                                 
# 59                                                                 
# 60                                                                 
# 61                                                                 
# 62                                                                 
# 63                                                                 
# 64";128;5;https://github.com/MReneBrown/Python-Course/blob/master/Function_Syntax.py;>7
196;4c950265f099c64e88b64082cea5a8d91ba5e08f;"T1"", ""T2"", ""T3"", ""T4"", ""T5"", ""T6"", ""T7"", ""T8"", ""T9"", ""T10"", ""T11"", ""T12"", ""T13"", ""T14"", ""T15"", ""T16"", ""T17"", ""T18"", ""T19"", ""T20"", ""T21"", ""T22"", ""T23"", ""T24"", ""T25"", """;100;4;https://github.com/AndresGarciaEscalante/Schnell-Language/blob/master/Schnell.py;2
197;4c950265f099c64e88b64082cea5a8d91ba5e08f;"T1"", ""T2"", ""T3"", ""T4"", ""T5"", ""T6"", ""T7"", ""T8"", ""T9"", ""T10"", ""T11"", ""T12"", ""T13"", ""T14"", ""T15"", ""T16"", ""T17"", ""T18"", ""T19"", ""T20"", ""T21"", ""T22"", ""T23"", ""T24"", ""T25"", """;100;4;https://github.com/AndresGarciaEscalante/Schnell-Language/blob/master/Schnell.py;2
198;cbf3fa5bd72d753c2018a0f797cb3b65d5dea3d5;"A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7";133;3;https://github.com/EdwinUrbina-13/CipherGUI/blob/master/MorseCodeCipher.py;2
199;506ad7e777fc2a30edc5d9f6817b0d4d5b6bbefb;""", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""";85;2;https://github.com/qzq2514/DNNCode/blob/master/textRecognition/DWCNN_CTCLoss_plateRec/evalPB.py;2
200;6dc7fe0605c4c500e135fb4760bf9116a131239e;"1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19"", ""20"", ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", ""29"", ""30"", ""31"", ""32"", ""33"", ""34";133;7;https://github.com/kevinwlip/Automation/blob/master/lib/common/zbAlertTemplates.py;2
201;506ad7e777fc2a30edc5d9f6817b0d4d5b6bbefb;"A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U""";82;1;https://github.com/qzq2514/DNNCode/blob/master/textRecognition/DWCNN_CTCLoss_plateRec/evalPB.py;2
202;8d7c80312dc967564c5e1cf3df26468097be232e;d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.;80;1;https://github.com/schottkey7/codewars/blob/master/Strings/domain_name_validator.py;2
203;96826b181bdcae40df1006b93a8b4fe5b83ad735;":
        print(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";418;2;https://github.com/elodietheelectronicfairy/blood_runner/blob/master/blood_runner_for_embedd.py;5
204;9b7fae8909304d7d462d3800e5dbe8d23ed4c342;"(x):
    """"""
    Input:
        x (numpy array) = input sequence of length N
    Output:
        The function should return a numpy array of length N
        X (numpy array) = The N point DFT of the input sequence x
    """"""
    ## Your code here
    N = len(x)";61;2;https://github.com/stembl/sigproc/blob/master/asp/workspace/A2/A2Part3.py;2
205;43981045ad2ae677328bfec2fb4d28db1d1b0fd9;"get_all_tweets(screen_name):
	#Twitter only allows access to a users most recent 3240 tweets with this method
	#authorize twitter, initialize tweepy
	auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
	auth.set_access_token(access_token, access_token_secret)
	api = tweepy.API(auth)
	
	#initialize a list to hold all the tweepy Tweets
	alltweets = []	
	
	#make initial request for most recent tweets (200 is the maximum allowed count)
	new_tweets = api.user_timeline(screen_name = screen_name,count=200)
	
	#save most recent tweets
	alltweets.extend(new_tweets)
	
	#save the id of the oldest tweet less one
	oldest = alltweets[-1].id - 1
	
	#keep grabbing tweets until there are no tweets left to grab
	while len(new_tweets) > 0:
		print ""getting tweets before %s"" % (oldest)
		
		#all subsiquent requests use the max_id param to prevent duplicates";171;9;https://github.com/coej/social-analytics/blob/master/twitter_dl.py;1
206;43981045ad2ae677328bfec2fb4d28db1d1b0fd9;"get_all_tweets(screen_name):
	#Twitter only allows access to a users most recent 3240 tweets with this method
	
	#authorize twitter, initialize tweepy
	auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
	auth.set_access_token(access_token, access_token_secret)
	api = tweepy.API(auth)
	
	#initialize a list to hold all the tweepy Tweets
	alltweets = []	
	
	#make initial request for most recent tweets (200 is the maximum allowed count)
	new_tweets = api.user_timeline(screen_name = screen_name,count=200)
	
	#save most recent tweets
	alltweets.extend(new_tweets)
	
	#save the id of the oldest tweet less one
	oldest = alltweets[-1].id - 1
	
	#keep grabbing tweets until there are no tweets left to grab
	while len(new_tweets) > 0:
		print ""getting tweets before %s"" % (oldest)
		
		#all subsiquent requests use the max_id param to prevent";170;9;https://github.com/coej/social-analytics/blob/master/twitter_dl.py;1
207;5c9798600f20016bc7878a7cfbcf29dec327f0a1;""")
    print(""I like typing this."")
    print(""This is fun."")
    print('Yay! Printing.')
    print(""I'd much rather you 'not'."")
    print('I ""said"" do not touch this.')
    print(""";62;2;https://github.com/mikelei8291/LearnPython/blob/master/lpthw/ex1.py;1
208;f955f9cd2d4b2ddeb44349c2716b17dfa3f7ef3c;"].values
# %%
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
# %%
# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
# %%";83;5;https://github.com/KaziSabrinaSonnet/Essential_Tremor_Detection/blob/master/Feature_Extracting/Classifier/Classifier_LR.py;>7
209;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67,;100;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
210;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67,;100;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
211;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.;100;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
212;3f99df658c409d54d612943f38b9c8263059704b;46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.;100;3;https://github.com/BetterWang/QWChargeCorr/blob/master/test/qwcumu_pPb16_MB_eff_v1.py;>7
213;3f99df658c409d54d612943f38b9c8263059704b;0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.96,;100;3;https://github.com/BetterWang/QWChargeCorr/blob/master/test/qwcumu_pPb16_MB_eff_v1.py;>7
214;3f99df658c409d54d612943f38b9c8263059704b;0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.96, 0.98,;100;3;https://github.com/BetterWang/QWChargeCorr/blob/master/test/qwcumu_pPb16_MB_eff_v1.py;>7
215;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67;99;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
216;3f99df658c409d54d612943f38b9c8263059704b;44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.;100;3;https://github.com/BetterWang/QWChargeCorr/blob/master/test/qwcumu_pPb16_MB_eff_v1.py;>7
217;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.;100;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
218;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.;100;6;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
219;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68,;100;3;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
220;c4a3a88b9fccb47902fd5b19acb79c98865d0ac8;44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.;100;4;https://github.com/samuelleblanc/python_codes/blob/master/Mie_Calc.py;>7
221;371419a87b9319fba36391e8005c806e75a639d3;"import threading
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = None

        def run(self):
            try:
                self.result = func(*args, **kwargs)
            except:
                self.result = default

    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():";80;3;https://github.com/monicashver/PongAI/blob/master/PongAIvAI.py;>7
222;371419a87b9319fba36391e8005c806e75a639d3;"import threading
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = None

        def run(self):
            try:
                self.result = func(*args, **kwargs)
            except:
                self.result = default

    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():";80;3;https://github.com/monicashver/PongAI/blob/master/PongAIvAI.py;>7
223;58458902e8132d42fc3ec0fb6495937d1f63357e;"import threading
    class FuncThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = None

        def run(self):
            self.result = func(*args, **kwargs)

        def _stop(self):
            if self.isAlive():
                threading.Thread._Thread__stop(self)
    it = FuncThread()
    it.start()
    it.join(";83;3;https://github.com/angelfish91/web-crawler/blob/master/baidu-image.py;>7
224;d86d3e0a8905ba466258ab06f1a8d8811832dc9b;"import signal

    class TimeoutError(Exception):
        pass

    def handler(signum, frame):
        raise TimeoutError()

    # set the timeout handler
    signal.signal(signal.SIGALRM, handler) 
    signal.alarm(timeout_duration)
    try:
        result = func(*args, **kwargs)
    except TimeoutError as exc:
        result = default
    finally:
        signal.alarm(0)

    return result";73;3;https://github.com/cnelsonsic/public_drown_scanner/blob/master/scanner.py;>7
225;d86d3e0a8905ba466258ab06f1a8d8811832dc9b;"import signal

    class TimeoutError(Exception):
        pass

    def handler(signum, frame):
        raise TimeoutError()

    # set the timeout handler
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(timeout_duration)
    try:
        result = func(*args, **kwargs)
    except TimeoutError as exc:
        result = default
    finally:
        signal.alarm(0)

    return result";73;3;https://github.com/cnelsonsic/public_drown_scanner/blob/master/scanner.py;>7
226;4bfe52bdc8fdc752a0d278665c62155c81273f86;0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.;90;3;https://github.com/bkargoll/TriggerStudies/blob/master/turnOnTauProducer.py;>7
227;87ea0a8e40da6e6d9671275b4a0c345009f695ff;"for i in range(1, len(array)):
        key = array[i]
        j = i - 1
        while j >= 0 and array[j] > key:
            array[j + 1] = array[j]
            j -= 1
        array[j + 1] = key";60;2;https://github.com/cjh5414/sort-with-python/blob/master/insertion-sort.py;0
228;67046ceffbef8e95b72daaa339225e8634694fa7;": sorted array
    """"""
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]
    return array";62;1;https://github.com/xyang57/LeetCode/blob/master/all_sorts.py;0
229;8ec0d022ae4f38b9e6d535435488a680b65f1645;"if not re.match(""^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"",";71;3;https://github.com/OliverJ20/Team-Rocket-Website-IFB299/blob/master/app/testfunctions.py;0
230;99d65b9588838b2879ab981458b79dc8a434d232;".csv"", ""rb"")
        
        part = MIMEBase('application', 'octet-stream')
        part.set_payload((attachment).read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', ""attachment; filename= %s"" % filename)
        
        msg.attach(part)
        
        server = smtplib.SMTP('smtp";75;3;https://github.com/sgoodwin90/work/blob/master/ZendeskAPI.py;4
231;1f11d7da7ffc7a04c263f7ac1d19ef5d3ccdba3a;"server_ssl = smtplib.SMTP_SSL(""smtp.gmail.com"", 465)
        server_ssl.ehlo() # optional, called by login()
        server_ssl.login(gmail_user, gmail_pwd)
        # ssl server doesn't support or need tls, so don't call server_ssl.starttls()
        server_ssl.sendmail(FROM, TO, message";67;3;https://github.com/antowe001253/STOCKS/blob/master/Python34/old/best_play.py;4
232;6e4a00787ce01b50c584f048d8dd13192b64f96e;"attachment = open(filename, 'rb')
    part = MIMEBase('application', 'octet-stream')
    part.set_payload((attachment).read())
    encoders.encode_base64(part)
    part.add_header('Content-Disposition', ""attachment; filename= %s"" % filename)
    msg.attach(part)";69;3;https://github.com/Presto412/VIT-Timetable-Scraper/blob/master/SendEmail.py;4
233;5218aed8cf46e2ca6f38b96a56c76b381add047a;"# Prepare actual message
    message = """"""\From: %s\nTo: %s\nSubject: %s\n\n%s
    """""" % (FROM, "", "".join(TO), SUBJECT, TEXT)
    try:
        #server = smtplib.SMTP(SERVER) 
        server = smtplib.SMTP(""smtp.gmail.com"", 587) #or port 465 doesn't seem to work!
        server.ehlo()
        server.starttls()
        server.login(gmail_user, gmail_pwd)
        server.sendmail(FROM, TO, message)
        #server.quit()
        server.close()
        print 'successfully sent the mail'
    except:
        print ""failed to send mail""";143;5;https://github.com/spatwardhan7/Disaster-Management-Mobile-Web-App-/blob/master/sendemail.py;4
234;90b47ef628f14b678d612f1d24960af0b6b68391;"(n):
    if n == 2:
        return True
    if n % 2 == 0 or n <= 1:
        return False
    sqr = int(math.sqrt(n)) + 1
    for divisor in range(3, sqr, 2):
        if n % divisor == 0:
            return False
    return True";64;1;https://github.com/skalam02/Crypto/blob/master/rsa.py;1
235;adcedfe70ca347338148f2049eb9671d22f334d4;"""User-Agent"":""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900.400""";65;5;https://github.com/WatsonLee/python-small-tools/blob/master/upload.py;4
236;795c84b13e59790cd5e8fe2b61b8a3e69c722c4e;"header = {'User-Agent':""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36""}       
    soup = get_soup(url, header)       
    ActualImages = []       
    for a in soup.find_all(""div"", {""class"":""rg_meta""}):       
        link, Type = json.loads(a.text)[""ou""], json.loads(a.text)[""ity""]       
        ActualImages.append((link, Type))       
    for i, (img, Type) in enumerate(ActualImages[0:";141;11;https://github.com/apiss2/Polka-dot/blob/master/im_search.py;>7
237;795c84b13e59790cd5e8fe2b61b8a3e69c722c4e;"header = {'User-Agent':""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36""}       
    soup = get_soup(url, header)       
    ActualImages = []       
    for a in soup.find_all(""div"", {""class"":""rg_meta""}):       
        link, Type = json.loads(a.text)[""ou""], json.loads(a.text)[""ity""]       
        ActualImages.append((link, Type))";126;8;https://github.com/apiss2/Polka-dot/blob/master/im_search.py;>7
238;d2e6309f96f7a621a36b42174489c5a494336fe9;".api.cognitive.microsoft.com/vision/v2.0/""

    analyze_url = vision_base_url + ""analyze""

    headers = {'Ocp-Apim-Subscription-Key': subscription_key,
               'Content-Type': 'application/octet-stream'}
    params = {'visualFeatures': 'Categories,Description,Color'}";67;3;https://github.com/baileye/azure-custom-vision-siggraph/blob/master/azurevision.py;0
239;dc53ab4c451394227f75e0f9efa2633b445f8ce8;"vision_base_url = ""https://westcentralus.api.cognitive.microsoft.com/vision/v2.0/""

    vision_analyze_url = vision_base_url + ""analyze""

    headers = {'Ocp-Apim-Subscription-Key': subscription_key}
    params  = {'visualFeatures': 'Categories,Description,Color'}
    data    = {'url':";68;2;https://github.com/xodhr98/hello/blob/master/main.py;0
240;b31e66e793acc8639668f9c8b5ac939b5e128191;".api.cognitive.microsoft.com/vision/v2.0/""
    vision_analyze_url = vision_base_url + ""analyze""
    headers = {'Ocp-Apim-Subscription-Key': subscription_key, ""Content-Type"": ""application/octet-stream""}
    params  = {'visualFeatures': '";60;3;https://github.com/andybbruno/Mobile/blob/master/Client/test_no_opencv.py;0
241;1e133669861afa9b7565378aa03d79259afddb98;"}
    params = {'visualFeatures': 'Categories,Description,Color'}
    response = requests.post(vision_analyze_url, headers=headers, params=params, data=image_data)
    response.raise_for_status()
    analysis = response.json()
    image_caption = analysis[""description""][""captions""][0][""text""].capitalize()";73;3;https://github.com/xiechen0692/Computer-vision/blob/master/Intelligent_home/Iot_Project1.py;0
242;ef496219f168d0a706bbba504682869e30baea2a;"}
    response = requests.post(ocr_url, headers=headers, params=params, json=data)
    response.raise_for_status()

    analysis = response.json()

    # Extract the word bounding boxes and text.
    line_infos = [region[""lines""] for region in analysis[""regions""]]
    word_infos = []
    for line in line_infos:
        for word_metadata in line:
            for word_info in word_metadata[""words""]:
                word_infos.append(word_info)";91;3;https://github.com/thetime50/ocr/blob/master/ocr_ms/print.py;0
243;c47a16aef42e78cfdcf126d9a9ac129a457af617;"('DISCORD_TOKEN')
    client = discord.Client()

    @client.event
    async def on_ready():
        print('Logged in as')
        print(client.user.name)
        print(client.user.id)
        print('------')

    @client.event
    async def on_message(message):
        if message.content.startswith('!test'):
            counter = 0
            tmp = await client.send_message(message.channel, 'Calculating messages...')
            async for log in client.logs_from(message.channel, limit=100):
                if log.author == message.author:
                    counter += 1

            await client.edit_message(tmp, 'You have {} messages.'.format(counter))
        elif message.content.startswith('!sleep'):
            await asyncio.sleep(5)
            await client.send_message(message.channel, 'Done sleeping')
        elif message.content.startswith('";192;10;https://github.com/eschlon/uther/blob/master/uther/uther.py;0
244;7fcb86edfddd0bb8fde6e53dc22f364c663617ab;"i = m - 1
        j = n - 1
        k = m + n - 1
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1
        while j >= 0:
            nums1[k] = nums2[j]
            k -= 1
            j -= 1";94;4;https://github.com/qijiayin/jiayin_practice/blob/master/88.py;0
245;eac35f84b641852e2893d17a79aa0e00fb067daf;"with open(file_name) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                print(f'Column names are {"", "".join(row)}')
                line_count += 1
            else:
                print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
                line_count += 1
        print(f'Processed {line_count} lines.')";113;5;https://github.com/NilsBlach/AirplaneBoarding/blob/master/code/AirplaneBoarding/measurements.py;0
246;067c3c43ff91c2c19ff20715e61c5786a13e9ed8;= ['__abs__', '__add__', '__and__', '__call__', '__cmp__', '__coerce__', '__contains__', '__delitem__', '__delslice__', '__div__', '__divmod__', '__eq__', '__float__', '__floordiv__', '__ge__', '__getitem__', '__getslice__;68;2;https://github.com/cyisfor/media-tagger/blob/master/proxy.py;>7
247;a9ccf29675c693c92bb3ca7ad8bd777cb4dfc772;= {'a':[1,2,3,4,5,6,7,8,9,10], 'b':[1,2,3,4,5,6,7,8,9,10], 'c':[1,2,3,4,5,6,7,8,9,10];79;1;https://github.com/rrsalian/My_Coding_World/blob/master/Python_ABC/python_Prth/python_abc/ticketBookingSystem.py;3
248;89d6b0e1c01b7070b218dfed327575e26464e2fc;":
            if line_count == 0:
                print(f'Column names are {"", "".join(row)}')
                line_count += 1
            else:
                print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
                line_count += 1
        print(f'Processed {line_count} lines.')";84;3;https://github.com/abhinav2127/ProblemStatements-Python/blob/master/ConvertReadCsvUTF16ToUTF8/converter.py;0
249;89d6b0e1c01b7070b218dfed327575e26464e2fc;":
            if line_count == 0:
                print(f'Column names are {"", "".join(row)}')
                line_count += 1
            else:
                print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
                line_count += 1
        print(f'Processed {line_count} lines.')";84;3;https://github.com/abhinav2127/ProblemStatements-Python/blob/master/ConvertReadCsvUTF16ToUTF8/converter.py;0
250;9061ffa7d967c6ff59217b36a9b608f1ecfa9e45;'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21', 'C22', 'C23', 'C24',;96;5;https://github.com/DownyPrio/xDeepFM/blob/master/exdeepfm/convert_ffm_process.py;3
251;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
252;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
253;fba9c49e384d6e3bb736c3f5c161afd2f0d1506d;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';111;4;https://github.com/1kc2/Minimal-Correlation-Portfolio/blob/master/stocks.py;>7
254;33c156f0d7710a8d91218dfc2c46d643a0a6bd84;[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[;66;2;https://github.com/holyrocklee/Internship/blob/master/WebAutomation/test/webtest.py;>7
255;16be96e3c6cc6ac83349eee9632bb7f9765e99e8;"a = 1
    b = 2
    c = 3
    d = 4
    e = 5
    f = 6
    g = 7
    h = 8
    i = 9
    j = 10
    k = 11
    l = 12
    m = 13
    n = 14
    o = 15
    p = 16
    q = 17
    r = 18
    s = 19
    t = 20
    u = 21
    v = 22
    w = 23
    x = 24
    y = 25
    z = 26";78;3;https://github.com/Wisetorsk/INF-200-Notes/blob/master/Python/ENIGMA_ord.py;3
256;72a565623c7ae62b6488db3ddfe11b6de53ffb34;""", ""1:00 PM"", ""2:00 PM"", ""3:00 PM"", ""4:00 PM"", ""5:00 PM"", ""6:00 PM"", ""7:00 PM"", ""8:00 PM"", ""9:00 PM"", ""10:00 PM""";71;1;https://github.com/rxkt/Ama_Raid_Bot/blob/master/amabot.py;>7
257;87d694589ac4f070de7ddb8de182c7359a4172be;"""10:00"", ""11:00"", ""12:00"", ""13:00"", ""14:00"", ""15:00"", ""16:00"", ""17:00"", ""18:00"", ""19:00"", ""20:00"", ""21:00"", ""22:00"", ""23:00""]";84;2;https://github.com/faical-yannick-congo/news-backend/blob/master/news-service/news/endpoints/coverage_endpoint.py;>7
258;a1ec0be5df1321ae12b2e74acc601a181af0532e;"""10:00"", ""10:30"", ""11:00"", ""11:30"", ""12:00"", ""12:30"", ""13:00"", ""13:30"", ""14:00"", ""14:30"", ""15:00"", ""15:30"", ""16:00"", ""16:30"", ""17:00"", ""17:30"", ""18:00"", ""18:30"", ""19:00"", ""19:30"",";120;3;https://github.com/Schlegen/Microgrid-Manager/blob/master/tools.py;>7
259;662476e59a96a119b89f796faf116e2d1543f13c;= [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,;100;3;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
260;a00de22eb0c4a03289b3ece804b2e7dd0de1b66e;"if n == 2 or n == 3: return True
    if n < 2 or n%2 == 0: return False
    if n < 9: return True
    if n%3 == 0: return False
    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0: return False
        if n%(f+2) == 0: return False
        f +=6
    return True";94;2;https://github.com/hkws/atcoder/blob/master/ABC142/D.py;>7
261;a00de22eb0c4a03289b3ece804b2e7dd0de1b66e;"if n == 2 or n == 3: return True
    if n < 2 or n%2 == 0: return False
    if n < 9: return True
    if n%3 == 0: return False
    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0: return False
        if n%(f+2) == 0: return False
        f +=6
    return True";94;2;https://github.com/hkws/atcoder/blob/master/ABC142/D.py;>7
262;90b47ef628f14b678d612f1d24960af0b6b68391;"if n == 2:
        return True
    if n % 2 == 0 or n <= 1:
        return False

    sqr = int(math.sqrt(n)) + 1

    for divisor in range(3, sqr, 2):
        if n % divisor == 0:
            return False
    return True";60;1;https://github.com/skalam02/Crypto/blob/master/rsa.py;>7
263;0fcee6e1cf3e8ccf71a129b3a2e7be174ca28ee0;"if n == 2:
        return True
    if n % 2 == 0 or n <= 1:
        return False

    sqr = int(n**0.5) + 1

    for divisor in range(3, sqr, 2):
        if n % divisor == 0:
            return False
    return True";60;1;https://github.com/thbertoldi/trustcode_desafio/blob/master/fourth.py;>7
264;a00de22eb0c4a03289b3ece804b2e7dd0de1b66e;"if n == 2 or n == 3: return True
    if n < 2 or n % 2 == 0: return False
    if n < 9: return True
    if n % 3 == 0: return False
    r = int(n**0.5)
    f = 5
    while f <= r:
        if n % f == 0: return False
        if n % (f + 2) == 0: return False
        f += 6
    return True";94;2;https://github.com/hkws/atcoder/blob/master/ABC142/D.py;>7
265;662476e59a96a119b89f796faf116e2d1543f13c;[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229;100;3;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
266;662476e59a96a119b89f796faf116e2d1543f13c;[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229;100;3;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
267;662476e59a96a119b89f796faf116e2d1543f13c;, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499;90;2;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
268;662476e59a96a119b89f796faf116e2d1543f13c;, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];147;8;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
269;f0374e36670fa34a2c3264679ae2a608cc8b051a;"# NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(local_filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:  # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush() commented by recommendation from J.F.Sebastian
    return local_filename";77;2;https://github.com/yeony102/DTW2018/blob/master/Week06/pinterest.py;>7
270;c858f69d234ae6fdf3c9240ea1c57a080d0163a0;"image_data = open(image_path, ""rb"").read()
    headers    = {'Ocp-Apim-Subscription-Key': subscription_key,
                  'Content-Type': 'application/octet-stream'}
    params     = {'visualFeatures': 'Categories,Description,Color'}
    response = requests.post(
        analyze_url, headers=headers, params=params, data=image_data)
    response.raise_for_status()

    # The 'analysis' object contains various fields that describe the image. The most
    # relevant caption for the image is obtained from the 'description' property.
    analysis = response.json()";121;7;https://github.com/feniculi/Azure/blob/master/jumple-cognitive-services-633bdce3da9e/Test Computer Vision/riconocimento_immagine_locale.py;4
271;a34690a93f7e38c8de2c4f333bd147d39441c1ec;"for i in range(1, 5):
        for j in range(1, 5):
            for k in range(1, 5):
                for l in range(1, 5):
                    for m in range(1, 5):
                        for n in range(1, 5):";60;2;https://github.com/ljeabmreosn/projecteuler/blob/master/python/pe205.py;2
272;971a5155a320a23115a41d16f14b6ccc6ffe9801;10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54;89;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
273;971a5155a320a23115a41d16f14b6ccc6ffe9801;10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52;85;2;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
274;85df0d22a300a937b676a185f6da4d658e61c522;"#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.";59;1;https://github.com/blkart/glance/blob/master/glance/async/utils.py;0
275;c834b0254318ff35a015d0e79f7ddfba6f7368f9;"Copyright (c) 2017-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree. An additional grant of patent rights
# can be found in the PATENTS file in the same directory.";61;1;https://github.com/zhongxia96/MGSum/blob/master/fairseq/tasks/abstractive_and_extractive.py;0
276;5c2b775890ed9d5219db155e56656d9fc53152cc;"#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http";74;2;https://github.com/kevinspaceyvn/odoo-clearcorp/blob/master/TODO-9.0/project_subproject/project_project.py;0
277;c101dc6dd83eca9260fbfc0369979a7965240df4;\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d;77;1;https://github.com/lucamassarelli/AMFC-BRCT/blob/master/core/MetricsCollector.py;>7
278;32cae5b3f480c11171b1162046f11fcb1a27270f;['AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'];205;10;https://github.com/rcally72/501Project1/blob/master/501Project1_Part2 v3.py;5
279;971a5155a320a23115a41d16f14b6ccc6ffe9801;,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54;98;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
280;27ea56215171eda10f2b8dafa08ae4c8ff75e2c8;"/w1_slave"")
    # Read all of the text in the file.
    text = tfile.read()
    # Close the file now that the text has been read.
    tfile.close()
    # Split the text with new lines (\n) and select the second line.
    secondline = text.split(""\n"")[1]
    # Split the line into words, referring to the spaces, and select the 10th word (counting from 0).
    temperaturedata = secondline.split("" "")[9]
    # The first two characters are ""t="", so get rid of those and convert the temperature from a string to a number.
    temperature = float(temperaturedata[2:])
    # Put the decimal point in the right place and display it.
    temperature = temperature / 1000";159;9;https://github.com/haloosirnate/pitemp/blob/master/usr/local/bin/gettemp_probe4.py;>7
281;27ea56215171eda10f2b8dafa08ae4c8ff75e2c8;"/w1_slave"")
    # Read all of the text in the file.
    text = tfile.read()
    # Close the file now that the text has been read.
    tfile.close()
    # Split the text with new lines (\n) and select the second line.
    secondline = text.split(""\n"")[1]
    # Split the line into words, referring to the spaces, and select the 10th word (counting from 0).
    temperaturedata = secondline.split("" "")[9]
    # The first two characters are ""t="", so get rid of those and convert the temperature from a string to a number.
    temperature = float(temperaturedata[2:])
    # Put the decimal point in the right place and display it.
    temperature = temperature / 1000";159;9;https://github.com/haloosirnate/pitemp/blob/master/usr/local/bin/gettemp_probe4.py;>7
282;66bc4cdb34b19d1c00c02dd980d8ea139b170094;"if lines[0].strip()[-3:] == 'YES':
        equals_pos = lines[1].find('t=')
        if equals_pos != -1:
            temp_string = lines[1][equals_pos+2:]
            temp_c = float(temp_string) / 1000.0";63;2;https://github.com/heuristik1/eai_brms/blob/master/tempsensor/readtemp.py;>7
283;15c61c768eb373210b4686ef71c948b0acc20fc3;"()
            while lines[0].strip()[-3:] != ""YES"":
                time.sleep(0.2)
                lines = read_temp_raw()
            equals_pos = lines[1].find(""t="")
            if equals_pos != -1:
                temp_string = lines[1][equals_pos+2:]
                temp_c = float(temp_string) / 1000.0
                temp_f = temp_c * 9.0 / 5.0 + 32.0";93;2;https://github.com/sejgit/fishtank/blob/master/fishtank.py;>7
284;425ddffd44b7825c94c77c2e1d35a333a81035ef;0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,;230;2;https://github.com/sbhklr/Brutus/blob/master/RPi-Core/gfx/logo.py;>7
285;27ea56215171eda10f2b8dafa08ae4c8ff75e2c8;"/w1_slave"")
    # Read all of the text in the file.
    text = tfile.read()
    # Close the file now that the text has been read.
    tfile.close()
    # Split the text with new lines (\n) and select the second line.
    secondline = text.split(""\n"")[1]
    # Split the line into words, referring to the spaces, and select the 10th word (counting from 0).
    temperaturedata = secondline.split("" "")[9]
    # The first two characters are ""t="", so get rid of those and convert the temperature from a string to a number.
    temperature = float(temperaturedata[2:])
    # Put the decimal point in the right place and display it.";154;9;https://github.com/haloosirnate/pitemp/blob/master/usr/local/bin/gettemp_probe4.py;>7
286;e74fbd2de9afeacf9f43249f451e262e560852a5;"def __init__(self, x=0.0, y=0.0, heading=0.0, turning=2*pi/10, distance=1.0):
        """"""This function is called when you create a new robot. It sets some of
        the attributes of the robot, either to their default values or to the values
        specified when it is created.""""""
        self.x = x
        self.y = y
        self.heading = heading
        self.turning = turning # only applies to target robots who constantly move in a circle
        self.distance = distance # only applies to target bot, who always moves at same speed.
        self.turning_noise    = 0.0
        self.distance_noise    = 0.0
        self.measurement_noise = 0.0


    def set_noise(self, new_t_noise, new_d_noise, new_m_noise):
        """"""This lets us change the noise parameters, which can be very
        helpful when using particle filters.""""""
        self.turning_noise    = float(new_t_noise)
        self.distance_noise    = float(new_d_noise)
        self.measurement_noise = float(new_m_noise)


    def move(self, turning, distance, tolerance = 0.001, max_turning_angle = pi):
        """"""This function turns the robot and then moves it forward.""""""
        # apply noise, this doesn't change anything if turning_noise
        # and distance_noise are zero.
        turning = random.gauss(turning, self.turning_noise)
        distance = random.gauss(distance, self.distance_noise)

        # truncate to fit physical limitations
        turning = max(-max_turning_angle, turning)
        turning = min( max_turning_angle, turning)
        distance = max(0.0, distance)

        # Execute motion
        self.heading += turning
        self.heading = angle_trunc(self.heading)
        self.x += distance * cos(self";353;20;https://github.com/jenevans33/CS8803-1/blob/master/src/Final/ekfcode.py;5
287;e74fbd2de9afeacf9f43249f451e262e560852a5;"""""""
        self.turning_noise = float(new_t_noise)
        self.distance_noise = float(new_d_noise)
        self.measurement_noise = float(new_m_noise)
    
    def move(self, turning, distance, tolerance = 0.001, max_turning_angle = pi):
        """"""
        This function turns the robot and then moves it forward";60;2;https://github.com/jenevans33/CS8803-1/blob/master/src/Final/ekfcode.py;5
288;e74fbd2de9afeacf9f43249f451e262e560852a5;"def __init__(self, x=0.0, y=0.0, heading=0.0, turning=2*pi/10, distance=1.0):
        """"""This function is called when you create a new robot. It sets some of 
        the attributes of the robot, either to their default values or to the values
        specified when it is created.""""""
        self.x = x
        self.y = y
        self.heading = heading
        self.turning = turning # only applies to target robots who constantly move in a circle
        self.distance = distance # only applies to target bot, who always moves at same speed.
        self.turning_noise    = 0.0
        self.distance_noise    = 0.0
        self.measurement_noise = 0.0


    def set_noise(self, new_t_noise, new_d_noise, new_m_noise):
        """"""This lets us change the noise parameters, which can be very
        helpful when using particle filters.""""""
        self.turning_noise    = float(new_t_noise)
        self.distance_noise    = float(new_d_noise)
        self.measurement_noise = float(new_m_noise)


    def move(self, turning, distance, tolerance=0.001, max_turning_angle=pi):
        """"""This function turns the robot and then moves it forward.""""""
        # apply noise, this doesn't change anything if turning_noise
        # and distance_noise are zero.
        turning = random.gauss(turning, self.turning_noise)
        distance = random.gauss(distance, self.distance_noise)

        # truncate to fit physical limitations
        turning = max(-max_turning_angle, turning)
        turning = min( max_turning_angle, turning)
        distance = max(0.0, distance)

        # Execute motion
        self.heading += turning
        self.heading = angle_trunc(self.heading)
        self.x += distance * cos(";352;20;https://github.com/jenevans33/CS8803-1/blob/master/src/Final/ekfcode.py;5
289;e74fbd2de9afeacf9f43249f451e262e560852a5;"def __init__(self, x=0.0, y=0.0, heading=0.0, turning=2*pi/10, distance=1.0):
        """"""This function is called when you create a new robot. It sets some of 
        the attributes of the robot, either to their default values or to the values
        specified when it is created.""""""
        self.x = x
        self.y = y
        self.heading = heading
        self.turning = turning # only applies to target robots who constantly move in a circle
        self.distance = distance # only applies to target bot, who always moves at same speed.
        self.turning_noise    = 0.0
        self.distance_noise    = 0.0
        self.measurement_noise = 0.0


    def set_noise(self, new_t_noise, new_d_noise, new_m_noise):
        """"""This lets us change the noise parameters, which can be very
        helpful when using particle filters.""""""
        self.turning_noise    = float(new_t_noise)
        self.distance_noise    = float(new_d_noise)
        self.measurement_noise = float(new_m_noise)


    def move(self, turning, distance, tolerance = 0.001, max_turning_angle = pi):
        """"""This function turns the robot and then moves it forward.""""""
        # apply noise, this doesn't change anything if turning_noise
        # and distance_noise are zero.
        turning = random.gauss(turning, self.turning_noise)
        distance = random.gauss(distance, self.distance_noise)

        # truncate to fit physical limitations
        turning = max(-max_turning_angle, turning)
        turning = min( max_turning_angle, turning)
        distance = max(0.0, distance)

        # Execute motion
        self.heading += turning
        self.heading = angle_trunc(self.heading)
        self.x += distance * cos(";352;20;https://github.com/jenevans33/CS8803-1/blob/master/src/Final/ekfcode.py;5
290;e74fbd2de9afeacf9f43249f451e262e560852a5;"def __init__(self, x=0.0, y=0.0, heading=0.0, turning=2*pi/10, distance=1.0):
        """"""This function is called when you create a new robot. It sets some of
        the attributes of the robot, either to their default values or to the values
        specified when it is created.""""""
        self.x = x
        self.y = y
        self.heading = heading
        self.turning = turning # only applies to target robots who constantly move in a circle
        self.distance = distance # only applies to target bot, who always moves at same speed.
        self.turning_noise    = 0.0
        self.distance_noise    = 0.0
        self.measurement_noise = 0.0


    def set_noise(self, new_t_noise, new_d_noise, new_m_noise):
        """"""This lets us change the noise parameters, which can be very
        helpful when using particle filters.""""""
        self.turning_noise    = float(new_t_noise)
        self.distance_noise    = float(new_d_noise)
        self.measurement_noise = float(new_m_noise)


    def move(self, turning, distance, tolerance=0.001, max_turning_angle=pi):
        """"""This function turns the robot and then moves it forward.""""""
        # apply noise, this doesn't change anything if turning_noise
        # and distance_noise are zero.
        turning = random.gauss(turning, self.turning_noise)
        distance = random.gauss(distance, self.distance_noise)

        # truncate to fit physical limitations
        turning = max(-max_turning_angle, turning)
        turning = min( max_turning_angle, turning)
        distance = max(0.0, distance)

        # Execute motion
        self.heading += turning
        self.heading = angle_trunc(self.heading)
        self.x += distance * cos(self";353;20;https://github.com/jenevans33/CS8803-1/blob/master/src/Final/ekfcode.py;5
291;b84be4250873fec8f80b0194f70170020bfd5720;".0, 1.0])
    glLightfv(GL_LIGHT0, GL_DIFFUSE, [1.0, 1.0, 1.0, 1.0])
    glLightfv(GL_LIGHT0, GL_SPECULAR, [1.0, 1.0, 1.0, 1.0])
    glEnable(GL_LIGHT0)
    glEnable(GL_LIGHTING)
    glEnable(";66;3;https://github.com/clover1967/pj_graphic/blob/master/pj2/teapot.py;>7
292;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,;90;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
293;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48;95;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
294;6f6654aeec5d798a590781b5c69fdfffb0f91548;"(object):
    """"""Simple vocabulary wrapper.""""""
    def __init__(self):
        self.word2idx = {}
        self.idx2word = {}
        self.idx = 0

    def add_word(self, word):
        if not word in self.word2idx:
            self.word2idx[word] = self.idx
            self.idx2word[self.idx] = word
            self.idx += 1

    def __call__(self, word):
        if not word in self.word2idx:
            return self.word2idx['<unk>']
        return self.word2idx[word]

    def __len__(self):
        return len(self.word2idx)";126;4;https://github.com/Aiman-Jabaren/Image-Captioning-using-LSTM-network/blob/master/pretrained_embedding.py;0
295;c16151c80c7598b36ad40fd178926c8dda519605;2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20];110;4.0;https://github.com/sony/nnabla-examples/blob/master/GANs/reenactgan/utils/preprocess_utils.py;>7
296;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47;93;3.0;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
297;7ebb786cd066594187910cfba3b3e58c3603b02d;= ['MMM', 'ABT', 'ABBV', 'ACN', 'ATVI', 'AYI', 'ADBE', 'AMD', 'AAP', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', ';99;4;https://github.com/Shiva-gs/Project3/blob/master/stock_data.py;>7
298;9382a1faf862ff3c879e84459dbce7ddba467ef5;")
    glBegin(GL_QUADS)
    glColor3f(1.0, 0.0, 0.0)
    glVertex3f( 1.0, 1.0, -1.0)
    glVertex3f(-1.0, 1.0, -1.0)
    glVertex3f(-1.0, 1.0,  1.0)
    glVertex3f( 1.0, 1.0,  1.0)
    glColor3f(0.0, 1.0, 0.0)
    glVertex3f( 1.0,-1.0,  1.0)
    glVertex3f(-1.0,-1.0,  1.0)
    glVertex3f(-1.0,-1.0, -1.0)
    glVertex3f( 1.0,-1.0, -1.0)
    glColor3f(0.0, 0.0, 1.0)
    glVertex3f( 1.0, 1.0, 1.0)
    glVertex3f(-1.0, 1.0, 1.0)
    glVertex3f(-1.0,-1.0, 1";213;10;https://github.com/Nibba2018/gluppy/blob/master/trans_rot_cube.py;>7
299;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
300;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
301;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
302;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
303;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
304;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
305;81c282288dfee4875a4f8e004d5f3a6ccdd2a49f;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','DD','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','TRV','UTX','UNH','VZ',';115;3;https://github.com/ctcpbl2004/Machine_Learning_For_Investment/blob/master/Volatility Classification.py;>7
306;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
307;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
308;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
309;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
310;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
311;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
312;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG',';95;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
313;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
314;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
		return arr
	pivot = arr[len(arr) // 2]
	left = [x for x in arr if x < pivot]
	middle = [x for x in arr if x == pivot]
	right = [x for x in arr if x > pivot]
	return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
315;5940ba60408240b861d1371d7df60df1fc31835c;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";74;5;https://github.com/gaowenhao/PythonAlgorithm/blob/master/sort/quick_sort.py;1
316;099c9271fb7cad9c165584be13e16d396017aeca;"pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)";64;2;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
317;9b3598903f3e1a54a5319dce6b56d92b6889bb64;"less = []
    pivotList = []
    more = []
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        for i in arr:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivotList.append(i)
        less = quick_sort(less)
        more = quick_sort(more)
        return less + pivotList + more";84;6;https://github.com/maxgardiner/sorting-algorthms/blob/master/sorting_algorithms.py;1
318;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
319;0198c9dba18ccdd13c2092a1ee70fb4d9f90b0eb;"if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i < pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)";66;2;https://github.com/mrdulin/python-codelab/blob/master/src/algorithm/quick_sort.py;1
320;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
321;099c9271fb7cad9c165584be13e16d396017aeca;"pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)";64;2;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
322;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
323;9b3598903f3e1a54a5319dce6b56d92b6889bb64;"less = []
    pivotList = []
    more = []
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        for i in arr:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivotList.append(i)
        less = quick_sort(less)
        more = quick_sort(more)
        return less + pivotList + more";84;6;https://github.com/maxgardiner/sorting-algorthms/blob/master/sorting_algorithms.py;1
324;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
325;2252b5bd0da7241aec6675c8898e18c3e4dddfc7;"less = []
    pivot_list = []
    more = []
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        for i in arr:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivot_list.append(i)
        less = quick_sort(less)
        more = quick_sort(more)
        return less + pivot_list + more";84;6;https://github.com/garciaae/median50/blob/master/sorting/quicksort.py;1
326;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
327;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
328;099c9271fb7cad9c165584be13e16d396017aeca;":
    if len(arr) <= 1 :
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";76;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
329;abd2a5bc34797016cf29ad70805a629175962b85;":
        return arr
    pivot = arr[0]
    left = []
    right = []
    for i in range(1, len(arr)) :
        if arr[i] < pivot :
            left.append(arr[i])
        else :
            right.append(arr[i])
    return quick_sort(left) + [pivot] + quick_sort(right)";72;1;https://github.com/HanifCarroll/DSA-Practice/blob/master/python/sorting/quick_sort.py;1
330;099c9271fb7cad9c165584be13e16d396017aeca;":
    if len(arr) <= 1 :
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";76;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
331;6ea15d729be6e3fa7ac9a454f483d54d5f63ad66;"list):
    if len(list) <= 1:
        return list
    else:
        pivot = list[0]
        less = [i for i in list[1:] if i <= pivot]
        greater = [i for i in list[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)";71;3;https://github.com/kahee/Python-Study/blob/master/data_structure/sort/quick_sort.py;1
332;099c9271fb7cad9c165584be13e16d396017aeca;"arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";78;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
333;099c9271fb7cad9c165584be13e16d396017aeca;"if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)";75;3;https://github.com/Stuming/Harbor/blob/master/Sorting/sorting.py;1
334;21f646e28b5aa5d074688a587f8cc16d2d05a5b0;"a):
    if len(a) <= 1:
        return a
    pivot = a[len(a) // 2]
    left = [x for x in a if x < pivot]
    middle = [x for x in a if x == pivot]
    right = [x for x in a if x > pivot]
    return";67;2;https://github.com/chitn/Algorithms-illustrated-by-Python/blob/master/example/quick_sort.py;1
335;6866b3eef9754b93a23047b81b0b6d7064a989ed;pw[0] + pw[1] + pw[2] + pw[3] + pw[4] + pw[5] + pw[6] + pw[7] + pw[8] + pw[9] + pw[10] + pw[11] + pw[12] + pw[13];69;2;https://github.com/RelyingEarth87/PracticePython/blob/master/passwordgenerator.py;3
336;ef64dcb139235e9eaee8d75108fe8ba5c5ef8fee;".replace(""1"", """").replace(""2"", """").replace(""3"", """").replace(""4"", """").replace(""5"", """").replace(""6"", """").replace(""7"", """").replace(""8"", """").replace(""9"", """").replace(""0"", """")
⋯
"", """").replace(""!"", """").replace(""@"", """").replace(""#"", """").replace(""$"", """").replace(""%"", """").replace(""^"", """").replace(""&"", """").replace(""*"", """").replace(""("", """").replace("")"", """").replace(""";209;11;https://github.com/noeleon930/firetruckingHWs/blob/master/WSM/Project1/codes/VectorSpace.py;3
337;3b81ee5a96ea9b5b5a0ec3ea35bd3895947fd7d8;"required for this module')

    # collect the parameters that are passed to boto3. Keeps us from having so many scalars floating around.
    stack_params = {
        'Capabilities': ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],
        'ClientRequestToken': to_native(uuid.uuid4()),
    }
    state = module.params";62;1;https://github.com/angystardust/ansible/blob/master/lib/ansible/modules/cloud/amazon/cloudformation.py;3
338;5a625b09081aca8c504d9ee48c61a15cf4173045;"""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"",
        ""X-Requested-With"": ""XMLHttpRequest"",
        """;63;3;https://github.com/qiuxianZz/qq_spider/blob/master/weixin/test1.py;>7
339;5a625b09081aca8c504d9ee48c61a15cf4173045;"""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"",
        ""X-Requested-With"": ""XMLHttpRequest"",
        """;63;3;https://github.com/qiuxianZz/qq_spider/blob/master/weixin/test1.py;>7
340;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll";69;2;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
341;4992ed94b48a8e1e5d77f8c13a21258f20e616bb;= ['MMM','AXP','AAPL','BA','CAT','CVX','CSCO','KO','DIS','XOM','GE','GS','HD','IBM','INTC','JNJ','JPM','MCD','MRK','MSFT','NKE','PFE','PG','UTX','UNH','VZ',';107;3;https://github.com/jiewwantan/StarTrader/blob/master/compare.py;>7
342;5ceada08cfab615035f6a845610f25e4bd50b246;'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on;130;6;https://github.com/shayneobrien/conversational-analysis/blob/master/src/utils.py;>7
343;bc6a870dbfef043d927eff793af24291cc7268e2;""", ""he"", ""him"", ""his"", ""himself"", ""she"", ""her"", ""hers"", ""herself"", ""it"", ""its"", ""itself"", ""they"", ""them"", ""their"", ""theirs"", ""themselves"", ""what"", ""which"", """;75;1;https://github.com/ammar188/jobAssignment/blob/master/nlp/nlp.py;>7
344;077a277acd2e9431ffb39e07c10d9707e3ee344b;"""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""";103;4;https://github.com/Villager-Dev/hypixel-stats/blob/master/cogs/cmds/settings.py;>7
345;bd0d429e0742b94a8b820221dd64c909f7b47c13;10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,;100;1;https://github.com/rogerkenny/pystuff/blob/master/Solutions.py;>7
346;8b06b6b0365888726b12724e05a6da81fc1ad47f;'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T':;118;5;https://github.com/fabiocaccamo/python-codicefiscale/blob/master/codicefiscale/codicefiscale.py;>7
347;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;"():
    resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr";75;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;0
348;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;"():
    resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text
        tickers.append(ticker)";103;4;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;0
349;73ebdd2f75a8ca79dd317ae39c5285fb7c2c4365;"()
    else:
        with open(""sp500tickers.pickle"", ""rb"") as f:
            tickers = pickle.load(f)
    if not os.path.exists('stock_dfs'):
        os.makedirs('stock_dfs')

    start = dt.datetime(2000, 1, 1)
    end = dt.datetime(2016, 12, 31)
    for ticker in tickers:
        print(ticker)
        if not os.path.exists('stock_dfs/{}.csv'.format(ticker)):
            df = web.DataReader(ticker, 'yahoo', start, end)
            df.to_csv('stock_dfs/{}.csv'.format(ticker))
        else:
            print('Already have {}'.format(ticker))";155;6;https://github.com/infiniteloop91/Python_Projects/blob/master/S&P_Scraper.py;>7
350;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,;98;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
351;8a08651c753c2c5d40ab282024384e108eb8b5d8;"values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""""",";66;4;https://github.com/kbalsamy/eallot/blob/master/eallot/portal/api.py;>7
352;c6540a8a78181301d8e00c27331a12a26e9f469a;,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32,p33,p34;66;2;https://github.com/outofink/twisted-pentago/blob/master/gamedb.py;0
353;4d13d1320e6f71fcac284159f5443962443ceb50;"# http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Input n>=6, Returns a list of primes, 2 <= p < n """"""
    correction = (n%6>1)
    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]
    sieve = [True] * (n/3)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
      if sieve[i]:
        k=3*i+1|1
        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
        sieve[(k*k+4*k-2*k*(i&1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&1))/6-1)/k+1)
    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]";309;16;https://github.com/ArturoBlazquez/Project-Euler/blob/master/10.py;0
354;f26a638e6f0e5c795f679fb1bf040962839cdd39;"{
        0: ""C"",
        1: ""C#"",
        2: ""D"",
        3: ""D#"",
        4: ""E"",
        5: ""F"",
        6: ""F#"",
        7: ""G"",
        8: ""G#"",
        9: ""A"",
        10: ""A#"",
        11: ""B""
    }";78;3;https://github.com/vrnmthr/CptGen/blob/master/CptGen/CptGen/utils.py;0
355;96826b181bdcae40df1006b93a8b4fe5b83ad735;"():
    print(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";499;2;https://github.com/elodietheelectronicfairy/blood_runner/blob/master/blood_runner_for_embedd.py;>7
356;7a28d2ce8c0641197d5927debf7e2d961e165c54;"def start(bot, update):   
        bot.send_message(chat_id=update.message.chat_id, text=""I'm a bot, please talk to me!"")   

    def echo(bot, update):   
        bot.send_message(chat_id=update.message.chat_id, text=update.message.text)   

    def caps(bot, update, args):   
        text_caps = '";77;4;https://github.com/Paddy420/pybot/blob/master/pybot.py;4
357;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,;98;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;2
358;d03c6a562fb23b5afcd5175a1cacd19cb37806a5;[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,0,11],[0,0,12],[0,0,13],[0,0,14],[0,0;116;7;https://github.com/marcusljx/python-sandbox/blob/master/puzzles/TowerOfHanoi/HanoiTower.py;>7
359;ee44cf1b6b1805f8ae909b88840460baf21af333;"Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
    Evaluate the sum of all the amicable numbers under 10000.";140;6;https://github.com/alistair-clark/project-euler/blob/master/problem21.py;0
360;e445c6716afdb916d46e4c111cd0ba00f1994fac;"""""""
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n). If d(a) = b and d(b) = a, where a != b, then a
    and b are an amicable pair and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
    55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
    71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.
    """"""";147;5;https://github.com/tofu-rocketry/project-euler/blob/master/ProjectEulerAnswers.py;0
361;a90f0fad8b7b3a10ba7d72a201658e0ad67c8e89;"Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n). If d(a) = b and d(b) = a, where a != b, then
    a and b are an amicable pair and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
    55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
    71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.";141;6;https://github.com/pcalcao/ProjectEuler/blob/master/prob_21.py;0
362;a90f0fad8b7b3a10ba7d72a201658e0ad67c8e89;"Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n). If d(a) = b and d(b) = a, where a != b, then a
    and b are an amicable pair and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
    55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
    71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.";141;6;https://github.com/pcalcao/ProjectEuler/blob/master/prob_21.py;0
363;ee44cf1b6b1805f8ae909b88840460baf21af333;"Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.";140;7;https://github.com/alistair-clark/project-euler/blob/master/problem21.py;0
364;e445c6716afdb916d46e4c111cd0ba00f1994fac;"""""""
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n).
    If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair
    and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
    55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
    71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.
    """"""";147;5;https://github.com/tofu-rocketry/project-euler/blob/master/ProjectEulerAnswers.py;0
365;a90f0fad8b7b3a10ba7d72a201658e0ad67c8e89;"Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n).
    If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair
    and each of a and b are called amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
    55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
    71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.";141;7;https://github.com/pcalcao/ProjectEuler/blob/master/prob_21.py;0
366;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46;91;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;1
367;971a5155a320a23115a41d16f14b6ccc6ffe9801;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49;97;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;1
368;5d30bbfdf55673e86b167fe3560491f89b24bed0;, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528,;63;1;https://github.com/darklinden/python_algorithm_test/blob/master/01/test.py;1
369;7ea30a2d47d5a31e795a0c8fdd20752170392e0c;0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0;99;4;https://github.com/gluoNNet/NineQuantumsMorris/blob/master/NNMM-cenk/main_da.py;>7
370;d8f4622aadb86ed48a927146ebf0fa1407812e4f;"weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),
               'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),
               'W_fc':tf.Variable(tf.random_normal([7*7*64,1024])),
               'out':tf.Variable(tf.random_normal([1024, n_classes]))}

    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),
              'b_conv2':tf.Variable(tf.random_normal([64])),
              'b_fc':tf.Variable(tf.random_normal([1024])),
              'out':tf.Variable(tf.random_normal([n_classes]))}

    #
⋯
conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])
    conv1 = maxpool2d(conv1)

    conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])
    conv2 = maxpool2d(conv2)";237;12;https://github.com/brosand/JetStuff/blob/master/TensorFlow/test7.py;4
371;dd0ad60f515961f60b9db7959953384839e98d6b;"embeddings = tf.Variable(
                tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))
            embed = tf.nn.embedding_lookup(embeddings, train_inputs)

            # Construct the variables for the NCE loss
            nce_weights = tf.Variable(
                tf.truncated_normal([vocabulary_size, embedding_size],
                                    stddev=1.0 / math.sqrt(embedding_size)))
            nce_biases = tf.Variable(tf.zeros([vocabulary_size]))

        # Compute the average NCE loss for the batch.
        # tf.nce_loss automatically draws a new sample of the negative labels each
        # time we evaluate the loss.
        loss = tf.reduce_mean(
            tf.nn.nce_loss(weights=nce_weights,
                           biases=nce_biases,
                           labels=train_labels,
                           inputs=embed,
                           num_sampled=num_sampled,
                           num_classes=vocabulary_size))

        # Construct the SGD optimizer using a learning rate of 1.0.
        optimizer = tf.train.GradientDescentOptimizer(1.0).minimize(loss)

        # Compute the cosine similarity between minibatch examples and all embeddings.
        norm = tf.sqrt(tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True))
        normalized_embeddings";227;11;https://github.com/taki17/onlab/blob/master/graph_vis.py;4
372;506ad7e777fc2a30edc5d9f6817b0d4d5b6bbefb;"""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""";103;3;https://github.com/qzq2514/DNNCode/blob/master/textRecognition/DWCNN_CTCLoss_plateRec/evalPB.py;>7
373;78fbbe00a6715e2471ad747cf604691c70940176;"make_pizza(size, *toppings):
    """"""Summarize the pizza we are about to make.""""""
    print(""\nMaking a "" + str(size) +
          ""-inch pizza with the following toppings:"")
    for topping in toppings:
        print(""- "" + topping)";60;1;https://github.com/cintiamh/PythonCrashCourse/blob/master/src/pizza.py;6
374;16be96e3c6cc6ac83349eee9632bb7f9765e99e8;"a = 1
    b = 2
    c = 3
    d = 4
    e = 5
    f = 6
    g = 7
    h = 8
    i = 9
    j = 10
    k = 11
    l = 12
    m = 13
    n = 14
    o = 15
    p = 16
    q = 17
    r = 18
    s = 19
    t = 20
    u = 21
    v = 22
    w = 23
    x = 24
    y = 25
    z = 26";78;2;https://github.com/Wisetorsk/INF-200-Notes/blob/master/Python/ENIGMA_ord.py;>7
375;4d1c070ea37c961d457192dbe530edef1cf1c135;"with urlopen('http://sixty-north.com/c/t.txt') as story:
        story_words = []
        for line in story:
            line_words = line.decode('utf-8').split()
            for word in line_words:
                story_words.append(word)";60;2;https://github.com/SqlAndWood/Python/blob/master/Python Script Files/urlopen.py;2
376;4d1c070ea37c961d457192dbe530edef1cf1c135;"with urlopen('http://sixty-north.com/c/t.txt') as story:
        story_words = []
        for line in story:
            line_words = line.decode('utf-8').split()
            for word in line_words:
                story_words.append(word)";60;2;https://github.com/SqlAndWood/Python/blob/master/Python Script Files/urlopen.py;2
377;4d1c070ea37c961d457192dbe530edef1cf1c135;"with urlopen('http://sixty-north.com/c/t.txt') as story:
        story_words = []
        for line in story:
            line_words = line.decode('utf-8').split()
            for word in line_words:
                story_words.append(word)";60;1;https://github.com/SqlAndWood/Python/blob/master/Python Script Files/urlopen.py;2
378;4d1c070ea37c961d457192dbe530edef1cf1c135;"with urlopen('http://sixty-north.com/c/t.txt') as story:
        story_words = []
        for line in story:
            line_words = line.decode('utf-8').split()
            for word in line_words:
                story_words.append(word)";60;1;https://github.com/SqlAndWood/Python/blob/master/Python Script Files/urlopen.py;2
379;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.

    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.

    For example::

        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]

        >>> orig = [""cookies"", ""love"", ""I""]
        >>> reverse_list_in_place(orig)
        >>> orig
        ['I', 'love', 'cookies']
    """"""";140;7;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
380;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.

    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.

    For example::

        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]

        >>> orig = [""cookies"", ""love"", ""I""]
        >>> reverse_list_in_place(orig)
        >>> orig
        ['I', 'love', 'cookies']
    """"""";140;7;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
381;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [";101;5;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
382;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [";101;4;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
383;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [";101;5;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
384;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [""cookies"", ""love"", ""I""]
        >>> reverse_list_in_place(orig)
        >>> orig
        ['I', 'love', 'cookies']
    """"""";140;7;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
385;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.

    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.

    For example::

        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]

        >>> orig = [""cookies"", ""love"", ""I""]
        >>> reverse_list_in_place(orig)
        >>> orig
        ['I', 'love', 'cookies']
    """"""";140;7;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
386;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [";101;4;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
387;6633a1db9eab30dff587a42b588fddc460dc1177;"Reverse the input list given, but do it ""in place"" --- that is,
    do not create a new list and return it, but modify the original
    list.
    
    **Do not use** the python function `reversed()` or the method
    `list.reverse()`.
    
    For example::
    
        >>> orig = [1, 2, 3]
        >>> reverse_list_in_place(orig)
        >>> orig
        [3, 2, 1]
        >>> orig = [";101;5;https://github.com/manishapme/hb_assessments/blob/master/1_assessment/lists/solution/practice.py;2
388;c6011f18f52e7f644a0ca14a635db4575db30ac8;")

@bot.command()
async def add(ctx, a: int, b: int):
    await ctx.send(a+b)

@bot.command()
async def multiply(ctx, a: int, b: int):
    await ctx.send(a*b)

@bot.command()
async def greet(ctx):
    await ctx.send("":smiley: :wave: Hello, there!"")

@bot.command()
async def cat(ctx):
    await ctx.send(""https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif"")

@bot.command()
async def info(ctx):
    embed = discord.Embed(title=""nice bot"", description=""Nicest bot there is ever."", color=0xeee657)

    # give info about you here
    embed.add_field(name=""Author"", value=""<YOUR-USERNAME>"")

    # Shows the number of servers the bot is member of.
    embed.add_field(name=""Server count"", value=f""{len(bot.guilds)}"")

    # give users a link to invite thsi bot to their server
    embed.add_field(name=""Invite"", value=""[Invite link](<insert your OAuth invitation link here>)"")

    await ctx.send(embed=embed)

bot.";286;22;https://github.com/Alysius/Nanachi/blob/master/bot.py;0
389;c6011f18f52e7f644a0ca14a635db4575db30ac8;")

@bot.command()
async def add(ctx, a: int, b: int):
    await ctx.send(a + b)

@bot.command()
async def multiply(ctx, a: int, b: int):
    await ctx.send(a * b)

@bot.command()
async def greet(ctx):
    await ctx.send("":smiley: :wave: Hello, there!"")

@bot.command()
async def cat(ctx):
    await ctx.send(""https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif"")

@bot.command()
async def info(ctx):
    embed = discord.Embed(title=""nice bot"", description=""Nicest bot there is ever."", color=0xeee657)

    # give info about you here
    embed.add_field(name=""Author"", value=""<YOUR-USERNAME>"")

    # Shows the number of servers the bot is member of.
    embed.add_field(name=""Server count"", value=f""{len(bot.guilds)}"")

    # give users a link to invite thsi bot to their server
    embed.add_field(name=""Invite"", value=""[Invite link](<insert your OAuth invitation link";270;20;https://github.com/Alysius/Nanachi/blob/master/bot.py;0
390;1b88840bbb595e30cb7664fdd72be9e2119e898a;"import discord
import asyncio

client = discord.Client()

@client.event
async def on_ready():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')

@client.event
async def on_message(message):
    if message.content.startswith('!test'):
        counter = 0
        tmp = await client.send_message(message.channel, 'Calculating messages...')
        async for log in client.logs_from(message.channel, limit=100):
            if log.author == message.author:
                counter += 1

        await client.edit_message(tmp, 'You have {} messages.'.format(counter))
    elif message.content.startswith('!sleep'):
        await asyncio.sleep(5)
        await client.send_message(message.channel, 'Done sleeping')

client.run('";188;11;https://github.com/tylergibbs2/async2rewrite/blob/master/sample_code.py;0
391;d993499b1a03faa99c8404845bb88c8bebe39206;"import candlestick_ohlc
    import matplotlib
    import pylab
    matplotlib.rcParams.update({'font.size': 9})

    def rsiFunc(prices, n=14):
        deltas = np.diff(prices)
        seed = deltas[:n + 1]
        up = seed[seed >= 0].sum() / n
        down = -seed[seed < 0].sum() / n
        rs = up / down
        rsi = np.zeros_like(prices)
        rsi[:n] = 100. - 100. / (1. + rs)

        for i in range(n, len(prices)):
            delta = deltas[i - 1]  # cause the diff is 1 shorter

            if delta > 0:
                upval = delta
                downval = 0.
            else:
                upval = 0.
                downval = -delta

            up = (up * (n - 1) + upval) / n
            down = (down * (n - 1) + downval) / n

            rs = up / down
            rsi[i] = 100. - 100. / (1. + rs)

        return rsi

    def movingaverage(values, window):
        weigths = np.repeat(1.0, window) / window
        smas = np.convolve(values, weigths, 'valid')
        return smas  # as a numpy array

    def ExpMovingAverage(values, window):
        weights = np.exp(np.linspace(-1., 0., window))
        weights /= weights.sum()
        a = np.convolve(values, weights, mode='full')[:len(values)]
        a[:window] = a[window]
        return a

    def computeMACD(x, slow=26, fast=12):
        """"""
        compute the MACD (";349;19;https://github.com/ThalesM/Bot-acoes-analise/blob/master/Main.py;>7
392;971a5155a320a23115a41d16f14b6ccc6ffe9801;6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54;97;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
393;2b1e7fac0b18d53b38f6131236d347a9c0ed588a;":
        return list
    else:
        pivot = list[0]
        less = [i for i in list[1:] if i <= pivot]
        greater = [i for i in list[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)";60;2;https://github.com/jouni-kantola/algo-practice/blob/master/quick-sort/quick_sort.py;2
394;ec31a82cecfdc9b1ef85e66d2da5f2b729af0b5e;""""""" Memoization decorator for functions taking one or more arguments. """"""
    class memodict(dict):
        def __init__(self, f):
            self.f = f
        def __call__(self, *args):
            return self[args]
        def __missing__(self, key):
            ret = self[key] = self.f(*key)
            return ret
    return memodict(f)";78;2;https://github.com/e2crawfo/spectral_dagger/blob/master/spectral_dagger/datasets/uni_dep.py;>7
395;25e00ef311572329f7e2180566c310c2f303f4fa;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',;76;2;https://github.com/austinguo550/Hangman-AI/blob/master/challenge.py;>7
396;6d16bdd5c9dc10eb858815d3dc8825e241c38878;], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: [], 16: [], 17: [], 18: [], 19: [], 20: [], 21: [], 22: [], 23: [], 24: [];116;5;https://github.com/IPPI-FSKTM-FDKRM/IPPI-Smart-Intelligence-System/blob/master/Flask/SocialMediaProfiler/Facebook.py;1
397;6d16bdd5c9dc10eb858815d3dc8825e241c38878;[], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: [], 16: [], 17: [], 18: [], 19: [], 20: [], 21: [], 22: [], 23: [], 24: [];112;5;https://github.com/IPPI-FSKTM-FDKRM/IPPI-Smart-Intelligence-System/blob/master/Flask/SocialMediaProfiler/Facebook.py;1
398;6d16bdd5c9dc10eb858815d3dc8825e241c38878;[], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: [], 16: [], 17: [], 18: [], 19: [], 20: [], 21: [], 22: [], 23: [], 24: [];112;5;https://github.com/IPPI-FSKTM-FDKRM/IPPI-Smart-Intelligence-System/blob/master/Flask/SocialMediaProfiler/Facebook.py;1
399;d78808b7a10918d43a105d591d6bc3e2a89ec1c1;data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17, data18, data19, data20, data21, data22, data23, data24, data25, data26, data27, data28, data29, data30, data31, data32, data33, data34, data35,;66;2;https://github.com/yfchenaa/k-means-and-assets-allocation-/blob/master/k-means.py;4
400;1ec27f7a818531166771c359e15f8c3dfd401b32;, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180;62;2;https://github.com/jpherrenknecht/serveur_vr/blob/master/test_numba.py;2
401;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
    soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
    table = soup.find('table', {'class': 'wikitable sortable'})                   
    tickers = []                   
    for row in table.findAll('tr')[1:]:                      
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
402;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
403;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
        soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
404;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                
        soup = bs4.BeautifulSoup(resp.text, 'lxml')                
        table = soup.find('table', {'class': 'wikitable sortable'})                
        tickers = []                
        for row in table.";64;1;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
405;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
        soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table";63;1;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
406;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;")       
    table = soup.find('table', {'class':'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text       
        tickers.append(ticker)";63;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;>7
407;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class' : 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[";86;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
408;f56204645d2ade470e7792f2d675c5e6e0bd1ba4;".BeautifulSoup(resp.text, ""lxml"")       
    table = soup.find('table', {'class' : 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";67;1;https://github.com/SegnorAlberto/Python-In-Business-Areas/blob/master/Finance/AA_stock charting-Sentex/Part4.py;>7
409;f56204645d2ade470e7792f2d675c5e6e0bd1ba4;".BeautifulSoup(resp.text, ""lxml"")       
        table = soup.find('table', {'class' : 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";67;1;https://github.com/SegnorAlberto/Python-In-Business-Areas/blob/master/Finance/AA_stock charting-Sentex/Part4.py;>7
410;75512293896435423873fc22605f93fe01577389;"')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class' : 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text       
            tickers.append(ticker)       
        tickers";79;3;https://github.com/kmjacinto2145/financial-markets-simulator/blob/master/Live Financial Markets Simulator.py;>7
411;f56204645d2ade470e7792f2d675c5e6e0bd1ba4;".BeautifulSoup(resp.text, ""lxml"")       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";67;1;https://github.com/SegnorAlberto/Python-In-Business-Areas/blob/master/Finance/AA_stock charting-Sentex/Part4.py;>7
412;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";94;4;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
413;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[";90;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
414;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;")                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text
            tickers.append(ticker)";63;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;>7
415;262b4b05988a075ae4b8da20105f8b4cb33305f8;")                   
    table = soup.find('table', {'class': 'wikitable sortable'})                   
    tickers = []                   
    for row in table.findAll('tr')[1:]:                   
        ticker = row.findAll('td')[0].text.replace('.','-')                   
        tickers.append(ticker)";74;2;https://github.com/VitzzViperzz/Python-Finance-Machine-Learning-projects/blob/master/extras/google_sp500.py;>7
416;85b97fc328ba43f86b94d61c8dde310200bc08d7;"://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
        soup = bs4.BeautifulSoup(response.text, 'lxml')                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text";86;2;https://github.com/crauer/econometrics/blob/master/pair_trading.py;>7
417;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;")                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text
            tickers.append(ticker)";63;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;>7
418;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
        soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
419;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
420;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
        soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:                   
            ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
421;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')   
        soup = bs4.BeautifulSoup(resp.text, 'lxml')   
        table = soup.find('table', {'class': 'wikitable sortable'})   
        tickers = []   
        for row in table.findAll('tr')[1:]:   
            ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
422;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
423;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;")                   
        table = soup.find('table', {'class': 'wikitable sortable'})                   
        tickers = []                   
        for row in table.findAll('tr')[1:]:
            ticker = row.findAll('td')[0].text
            tickers.append(ticker)";63;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;>7
424;a2aac312e637010e12581e09e7287eaf25f81da0;= ['MMM', 'ABT', 'ABBV', 'ACN', 'ATVI', 'AYI', 'ADBE', 'AMD', 'AAP', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', ';67;3;https://github.com/Abhinawk9/test/blob/master/yahooFinance.py;>7
425;f56204645d2ade470e7792f2d675c5e6e0bd1ba4;".BeautifulSoup(resp.text, ""lxml"")                   
    table = soup.find('table', {'class': 'wikitable sortable'})                   
    tickers = []                           
    for row in table.findAll('tr')[1:]:                   
        ticker = row.findAll('td')[0].text";67;1;https://github.com/SegnorAlberto/Python-In-Business-Areas/blob/master/Finance/AA_stock charting-Sentex/Part4.py;>7
426;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
        soup = bs4.BeautifulSoup(resp.text, 'lxml')       
        table = soup.find('table', {'class': 'wikitable sortable'})       
        tickers = []       
        for row in table.findAll('tr')[1:]:       
            ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
427;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')               
    soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
    table = soup.find('table', {'class': 'wikitable sortable'})                   
    tickers = []                   
    for row in table.findAll('tr')[1:]:                   
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
428;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
       soup = bs4.BeautifulSoup(resp.text, 'lxml')       
       table = soup.find('table', {'class': 'wikitable sortable'})       
       tickers = []       
       for row in table.findAll('tr')[1:]:       
           ticker = row.findAll('td')[";90;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
429;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
    soup = bs4.BeautifulSoup(resp.text, 'lxml')       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
430;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')                   
    soup = bs4.BeautifulSoup(resp.text, 'lxml')                   
    table = soup.find('table', {'class': 'wikitable sortable'})                   
    tickers = []                   
    for row in table.findAll('tr')[1:]:";79;2;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
431;a7920bc3bdf001ee9e1a9a5c9147b2069782695b;"')       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text       
        tickers.append(ticker)";64;2;https://github.com/scaratozzolo/RandomPortfolios/blob/master/gettickers.py;>7
432;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
    soup = bs4.BeautifulSoup(resp.text, 'lxml')       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";94;4;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
433;f56204645d2ade470e7792f2d675c5e6e0bd1ba4;".BeautifulSoup(resp.text, ""lxml"")       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";67;1;https://github.com/SegnorAlberto/Python-In-Business-Areas/blob/master/Finance/AA_stock charting-Sentex/Part4.py;>7
434;6bcafa51129e5a18509ab485a4623450ff916b71;"get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')       
    soup = bs4.BeautifulSoup(resp.text, 'lxml')       
    table = soup.find('table', {'class': 'wikitable sortable'})       
    tickers = []       
    for row in table.findAll('tr')[1:]:       
        ticker = row.findAll('td')[0].text";90;2;https://github.com/juliennassar/stock-analyser/blob/master/server/server.py;>7
435;510ff56d9ab9b435d1db704b6fe07e95c8afeff6;"""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19"", ""20"", ""21"", ""22"", ""23"", ""24""";95;5;https://github.com/shym98/MovieSearch/blob/master/untitled/ChartDirector/pythondemo_cgi/deptharea.py;3
436;36b2b3e7de8a199d45f713e0cf03cc313f669d21;""", ""g"", ""gs"", ""mp"", ""fg"", ""fga"", ""fg_pct"", ""fg3"", ""fg3a"", ""fg3_pct"", ""fg2"", ""fg2a"", ""fg2_pct"", ""efg_pct"", ""ft"", ""fta"", ""ft_pct"", ""orb"", ""drb"", ""trb"", ""ast";80;3;https://github.com/BrianSchwaz/cashketball/blob/master/finished spider/playerSpider.py;2
437;88af220957d11212580f0a1eeda46e108ee85b5b;""", ""min"", ""pts"", ""fgm"", ""fga"", ""fg%"", ""3pm"", ""3pa"", ""3p%"", ""ftm"", ""fta"", ""ft%"", ""oreb"", ""dreb"", ""reb"", """;62;1;https://github.com/aniehuser/senior-design-group10/blob/master/demos/example-workflows/scrape_nba.py;2
438;6ea36698d0c7def644901c69eaaab4937bda9faa;"""G"", ""AB"", ""R"", ""H"", ""2B"", ""3B"", ""HR"", ""RBI"", ""SB"", ""CS"", ""BB"", ""SO"", ""IBB"", ""HBP"", ""SH"", ""SF""";63;2;https://github.com/putsy-caballero/VintageDraft/blob/master/entities/Batter.py;3
439;36b2b3e7de8a199d45f713e0cf03cc313f669d21;""", ""g"", ""gs"", ""mp"", ""fg"", ""fga"", ""fg_pct"", ""fg3"", ""fg3a"", ""fg3_pct"", ""fg2"", ""fg2a"", ""fg2_pct"", ""efg_pct"", ""ft"", ""fta"", ""ft_pct"", ""orb"", """;71;3;https://github.com/BrianSchwaz/cashketball/blob/master/finished spider/playerSpider.py;3
440;ed48df6d28b9e3bba82066c250427d78ac5516fc;https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22{0}%2C%20{1}%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys;88;3;https://github.com/ramrom/haus/blob/master/weather.py;4
441;944d16400891095f5cba285cc06c64e4aca4a676;"= ""https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22"" + city + ""%2C%20"" + state + ""%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys""";95;5;https://github.com/aadiuppal/programming/blob/master/data_sc/w.py;4
442;ed48df6d28b9e3bba82066c250427d78ac5516fc;https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22{0}%2C%20{1}%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys;88;3;https://github.com/ramrom/haus/blob/master/weather.py;4
443;944d16400891095f5cba285cc06c64e4aca4a676;"url = ""https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22"" + city + ""%2C%20"" + state + ""%22)";77;4;https://github.com/aadiuppal/programming/blob/master/data_sc/w.py;4
444;43d366138776e9e413c71aa18513ae7c3ea30960;row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22];109;6;https://github.com/MatsDahlberg/PythonCourse/blob/master/wangSandberg.py;>7
445;43d366138776e9e413c71aa18513ae7c3ea30960;row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22];114;6;https://github.com/MatsDahlberg/PythonCourse/blob/master/wangSandberg.py;>7
446;c0d8455767ea9e44863ddcfa670ba6a541f5f628;row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13];64;3;https://github.com/carthage-college/django-djschoology/blob/master/djschoology/bin/schoology.py;>7
447;9d4a0ad370818b6caf045c1cc50da0dc6f13c133;row[25], row[26], row[27], row[28], row[29], row[30], row[31], row[32], row[33], row[34], row[35], row[36], row[37], row[38],;70;2;https://github.com/NCTUMUILab/Intelligent_noti/blob/master/script/qualtrics_to_db.py;>7
448;c2d33909e4cd68f7d83081ccb5bf4608e566607e;row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22], row[23], row[24], row[25], row[;107;5;https://github.com/Change72/gc-python-graduate/blob/master/FeatureCate669/9_1_beforeLearn.py;>7
449;7a3a71d08098f3d90ecf0152b697ae8f76b89cd5;row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22], row[23], row[24], row[25], row[26], row[27], row[28], row[29], row[30], row[31], row[32], row[33], row[34], row[35], row[36], row[37], row[38], row[39], row[40], row[41], row[42], row[43;193;10;https://github.com/ayman-elgharabawy/DataBaseMigrationScript/blob/master/migrator.py;>7
450;c0d8455767ea9e44863ddcfa670ba6a541f5f628;, row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15];75;3;https://github.com/carthage-college/django-djschoology/blob/master/djschoology/bin/schoology.py;>7
451;43d366138776e9e413c71aa18513ae7c3ea30960;, row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22];110;6;https://github.com/MatsDahlberg/PythonCourse/blob/master/wangSandberg.py;>7
452;43d366138776e9e413c71aa18513ae7c3ea30960;row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18], row[19], row[20], row[21], row[22];109;6;https://github.com/MatsDahlberg/PythonCourse/blob/master/wangSandberg.py;>7
453;c0d8455767ea9e44863ddcfa670ba6a541f5f628;row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15];74;3;https://github.com/carthage-college/django-djschoology/blob/master/djschoology/bin/schoology.py;>7
454;a9ccf29675c693c92bb3ca7ad8bd777cb4dfc772;= {'a': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'b': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'c': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'd': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'e;108;3;https://github.com/rrsalian/My_Coding_World/blob/master/Python_ABC/python_Prth/python_abc/ticketBookingSystem.py;>7
455;a9ccf29675c693c92bb3ca7ad8bd777cb4dfc772;= {'a': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'b': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'c': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'd': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];105;3;https://github.com/rrsalian/My_Coding_World/blob/master/Python_ABC/python_Prth/python_abc/ticketBookingSystem.py;>7
456;a9ccf29675c693c92bb3ca7ad8bd777cb4dfc772;= {'a': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'b': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'c': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'd': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'e;108;3;https://github.com/rrsalian/My_Coding_World/blob/master/Python_ABC/python_Prth/python_abc/ticketBookingSystem.py;>7
457;971a5155a320a23115a41d16f14b6ccc6ffe9801;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,;94;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;>7
458;c8ab7efa564508803170b0877019427c7586b1a6;"window = turtle.Screen()
    window.bgcolor(""red"")
    brad = turtle.Turtle()
    brad.shape(""turtle"")
    brad.color(""yellow"")
    brad.speed(2)
    for i in range(1,37):
        draw_square(brad)
        brad.right(10)
    window.exitonclick()";69;2;https://github.com/JuanBalceda/python-basics/blob/master/udacity/mindstorm.py;1
459;971a5155a320a23115a41d16f14b6ccc6ffe9801;6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54;97;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;0
460;4777897fd744ca5e37f4a05b86f01fa66369570f;"rects1 = plt.bar(index, means_men, bar_width,
                     alpha=opacity,
                     color='b',
                     label='Men')

    rects2 = plt.bar(index + bar_width, means_women, bar_width,
                     alpha=opacity,
                     color='r',
                     label='Women')

    plt.xlabel('Group')
    plt.ylabel('Scores')
    plt.title('Scores by group and gender')
    plt.xticks(index + bar_width, ('A', 'B', 'C', 'D', 'E'))
    plt.legend()

    plt.tight_layout()
    plt.show()";131;5;https://github.com/AparnaThricovil/data-mining/blob/master/PlotGraph.py;0
461;662476e59a96a119b89f796faf116e2d1543f13c;, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,;79;2;https://github.com/DamonAnderson/paillier/blob/master/rabinMiller.py;>7
462;47081907e60f9f9cab0effee35db245a5b7003a6;"(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";79;3;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
463;47081907e60f9f9cab0effee35db245a5b7003a6;"pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)";64;2;https://github.com/Tryking/DeepLearning/blob/master/cs231n/assignment1/1_python_numpy_tutorial/1_python.py;2
464;4118a938ea514437331aa7c8b9a9e0e1a398d8d7;"(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)";78;6;https://github.com/Muzijiajian/AppliedMathmaticsForComputer/blob/master/hw0/python_tutorial.py;2
465;ecad8f91a2f37bcb755ab0b26c91f38e68ac37ae;"plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=plt.cm.Paired)
    plt.xlabel('Sepal length')
    plt.ylabel('Sepal width')
    plt.xlim(xx.min(), xx.max())
    plt.";66;1;https://github.com/ieCecchetti/Python_ML_DL_examples/blob/master/SVM/script/SVM_rbf.py;0
466;a83652129522d52f93b92cc1943979f6ca1a6ba1;, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y;100;5;https://github.com/Coder670/random_password_generator/blob/master/random_password_generator.py;0
467;971a5155a320a23115a41d16f14b6ccc6ffe9801;3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,;100;3;https://github.com/peruzzim/cmg-cmssw/blob/master/HLTrigger/Configuration/test/OnLine_HLT_PRef.py;0
468;4efe348486874eee36c0eaf2cac672ce8b5ade0b;"two Turtle Doves, "", ""three French Hens, "", ""four Calling Birds, "", ""five Gold Rings, "", ""six Geese-a-Laying, "", ""seven Swans-a-Swimming, "", ""eight Maids-a-Milking, "", ""nine Ladies Dancing, "", ""ten Lords-a-Leaping, "", ""eleven Pipers Piping, "", ""twelve Drummers Drumming, ""]";88;2;https://github.com/Khainguyen1349/Exercism/blob/master/python/twelve-days/twelve_days.py;1
469;4efe348486874eee36c0eaf2cac672ce8b5ade0b;"two Turtle Doves,"", ""three French Hens,"", ""four Calling Birds,"", ""five Gold Rings,"", ""six Geese-a-Laying,"", ""seven Swans-a-Swimming,"", ""eight Maids-a-Milking,"", ""nine Ladies Dancing,"", ""ten Lords-a-Leaping,"", ""eleven Pipers Piping,"", ""twelve Drummers Drumming,""]";88;2;https://github.com/Khainguyen1349/Exercism/blob/master/python/twelve-days/twelve_days.py;1
470;4efe348486874eee36c0eaf2cac672ce8b5ade0b;""", ""three French Hens, "", ""four Calling Birds, "", ""five Gold Rings, "", ""six Geese-a-Laying, "", ""seven Swans-a-Swimming, "", ""eight Maids-a-Milking, "", ""nine Ladies Dancing, "", ""ten Lords-a-Leaping, "", ""eleven Pipers Piping, "", ""twelve Drummers Drumming, ""]";84;2;https://github.com/Khainguyen1349/Exercism/blob/master/python/twelve-days/twelve_days.py;1
471;2b3691d99ac7193d3d9a1be63f7c49065bd5c35b;"2013  Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed";75;4;https://github.com/bcl/anaconda/blob/master/pyanaconda/ui/gui/spokes/software.py;0
472;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7
473;f18b0ee37075e4e0d5c31dbe7255ecca66830b10;"resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs4.BeautifulSoup(resp.text,'lxml')
    table = soup.find('table',{'class':'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text";94;3;https://github.com/hfk97/edgar_scraping/blob/master/menu.py;>7